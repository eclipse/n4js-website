!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!k[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(m[n]=t[n]);0==--y&&0===v&&P()}(e,n),t&&t(e,n)};var n,o=!0,i="5c26811618424e1fb46a",r=1e4,s={},a=[],c=[];function l(e){var t=N[e];if(!t)return I;var o=function(o){return t.hot.active?(N[o]?-1===N[o].parents.indexOf(e)&&N[o].parents.push(e):(a=[e],n=o),-1===t.children.indexOf(o)&&t.children.push(o)):(console.warn("[HMR] unexpected require("+o+") from disposed module "+e),a=[]),I(o)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return I[e]},set:function(t){I[e]=t}}};for(var r in I)Object.prototype.hasOwnProperty.call(I,r)&&"e"!==r&&"t"!==r&&Object.defineProperty(o,r,i(r));return o.e=function(e){return"ready"===p&&h("prepare"),v++,I.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===p&&(g[e]||S(e),0===v&&0===y&&P())}},o.t=function(e,t){return 1&t&&(e=o(e)),I.t(e,-2&t)},o}function u(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var o=0;o<e.length;o++)t._acceptedDependencies[e[o]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:M,apply:j,status:function(e){if(!e)return p;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:s[e]};return n=void 0,t}var d=[],p="idle";function h(e){p=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var f,m,w,y=0,v=0,g={},b={},k={};function O(e){return+e+""===e?+e:e}function M(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return o=e,h("check"),(t=r,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var o=new XMLHttpRequest,r=I.p+""+i+".hot-update.json";o.open("GET",r,!0),o.timeout=t,o.send(null)}catch(e){return n(e)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)n(new Error("Manifest request to "+r+" timed out."));else if(404===o.status)e();else if(200!==o.status&&304!==o.status)n(new Error("Manifest request to "+r+" failed."));else{try{var t=JSON.parse(o.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return h("idle"),null;b={},g={},k=e.c,w=e.h,h("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});m={};return S(0),"prepare"===p&&0===v&&0===y&&P(),t});var t}function S(e){k[e]?(b[e]=!0,y++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=I.p+""+e+"."+i+".hot-update.js",document.head.appendChild(t)}(e)):g[e]=!0}function P(){h("ready");var e=f;if(f=null,e)if(o)Promise.resolve().then(function(){return j(o)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in m)Object.prototype.hasOwnProperty.call(m,n)&&t.push(O(n));e.resolve(t)}}function j(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,o,r,c,l;function u(e){for(var t=[e],n={},o=t.slice().map(function(e){return{chain:[e],id:e}});o.length>0;){var i=o.pop(),r=i.id,s=i.chain;if((c=N[r])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:r};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:r};for(var a=0;a<c.parents.length;a++){var l=c.parents[a],u=N[l];if(u){if(u.hot._declinedDependencies[r])return{type:"declined",chain:s.concat([l]),moduleId:r,parentId:l};-1===t.indexOf(l)&&(u.hot._acceptedDependencies[r]?(n[l]||(n[l]=[]),d(n[l],[r])):(delete n[l],t.push(l),o.push({chain:s.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function d(e,t){for(var n=0;n<t.length;n++){var o=t[n];-1===e.indexOf(o)&&e.push(o)}}t=t||{};var f={},y=[],v={},g=function(){console.warn("[HMR] unexpected require("+M.moduleId+") to disposed module")};for(var b in m)if(Object.prototype.hasOwnProperty.call(m,b)){var M;l=O(b);var S=!1,P=!1,j=!1,C="";switch((M=m[b]?u(l):{type:"disposed",moduleId:b}).chain&&(C="\nUpdate propagation: "+M.chain.join(" -> ")),M.type){case"self-declined":t.onDeclined&&t.onDeclined(M),t.ignoreDeclined||(S=new Error("Aborted because of self decline: "+M.moduleId+C));break;case"declined":t.onDeclined&&t.onDeclined(M),t.ignoreDeclined||(S=new Error("Aborted because of declined dependency: "+M.moduleId+" in "+M.parentId+C));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(M),t.ignoreUnaccepted||(S=new Error("Aborted because "+l+" is not accepted"+C));break;case"accepted":t.onAccepted&&t.onAccepted(M),P=!0;break;case"disposed":t.onDisposed&&t.onDisposed(M),j=!0;break;default:throw new Error("Unexception type "+M.type)}if(S)return h("abort"),Promise.reject(S);if(P)for(l in v[l]=m[l],d(y,M.outdatedModules),M.outdatedDependencies)Object.prototype.hasOwnProperty.call(M.outdatedDependencies,l)&&(f[l]||(f[l]=[]),d(f[l],M.outdatedDependencies[l]));j&&(d(y,[M.moduleId]),v[l]=g)}var D,q=[];for(o=0;o<y.length;o++)l=y[o],N[l]&&N[l].hot._selfAccepted&&q.push({module:l,errorHandler:N[l].hot._selfAccepted});h("dispose"),Object.keys(k).forEach(function(e){!1===k[e]&&function(e){delete installedChunks[e]}(e)});for(var A,B,E=y.slice();E.length>0;)if(l=E.pop(),c=N[l]){var F={},R=c.hot._disposeHandlers;for(r=0;r<R.length;r++)(n=R[r])(F);for(s[l]=F,c.hot.active=!1,delete N[l],delete f[l],r=0;r<c.children.length;r++){var x=N[c.children[r]];x&&((D=x.parents.indexOf(l))>=0&&x.parents.splice(D,1))}}for(l in f)if(Object.prototype.hasOwnProperty.call(f,l)&&(c=N[l]))for(B=f[l],r=0;r<B.length;r++)A=B[r],(D=c.children.indexOf(A))>=0&&c.children.splice(D,1);for(l in h("apply"),i=w,v)Object.prototype.hasOwnProperty.call(v,l)&&(e[l]=v[l]);var _=null;for(l in f)if(Object.prototype.hasOwnProperty.call(f,l)&&(c=N[l])){B=f[l];var W=[];for(o=0;o<B.length;o++)if(A=B[o],n=c.hot._acceptedDependencies[A]){if(-1!==W.indexOf(n))continue;W.push(n)}for(o=0;o<W.length;o++){n=W[o];try{n(B)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:B[o],error:e}),t.ignoreErrored||_||(_=e)}}}for(o=0;o<q.length;o++){var T=q[o];l=T.module,a=[l];try{I(l)}catch(e){if("function"==typeof T.errorHandler)try{T.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:e}),t.ignoreErrored||_||(_=n),_||(_=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||_||(_=e)}}return _?(h("fail"),Promise.reject(_)):(h("idle"),new Promise(function(e){e(y)}))}var N={};function I(t){if(N[t])return N[t].exports;var n=N[t]={i:t,l:!1,exports:{},hot:u(t),parents:(c=a,a=[],c),children:[]};return e[t].call(n.exports,n,n.exports,l(t)),n.l=!0,n.exports}I.m=e,I.c=N,I.d=function(e,t,n){I.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},I.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},I.t=function(e,t){if(1&t&&(e=I(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(I.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)I.d(n,o,function(t){return e[t]}.bind(null,o));return n},I.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(t,"a",t),t},I.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},I.p="dist/",I.h=function(){return i},l(10)(I.s=10)}([function(e,t){e.exports=React},function(e,t,n){"use strict";(function(e){n(5),n(6);!function(e){e._n4jsImport=function(e){return n(7)(e)}}("object"==typeof e?e:self)}).call(this,n(2))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(8)},function(e,t){e.exports=ReactDOM},function(e,t,n){(function(e){!function(e){"use strict";function t(e,t,n,o){"function"==typeof t&&Object.setPrototypeOf(e,t),t===Error&&(n.stack={get:function(){return this.$__n4err.stack}},n.message={get:function(){return this.$__n4err.message}},n.name={get:function(){return e.n4type.name}}),Object.defineProperties(e,o);var i=Object.create(t.prototype,n);Object.defineProperty(i,"constructor",{value:e}),e.prototype=i}function n(e,t){Object.defineProperty(e,"n4type",{value:t,enumerable:!1}),t.ownedMembers.forEach(function(e){Object.defineProperty(e,"owner",{value:t,enumerable:!1})}),t.ownedMembers.forEach(function(e){e instanceof h&&(Object.defineProperty(e,"jsFunction",{value:e.constructor,enumerable:!1}),e.constructor.n4member=e)})}function o(e){Object.defineProperty(e,"target",{value:this,enumerable:!1})}function i(e){e.annotations&&e.annotations.forEach(o,e)}var r=function(e){Object.prototype.constructor.call(this,e)},s=function(e){r.prototype.constructor.call(this,e),this.origin=e.origin,this.annotations=e.annotations||[],i(this)},a=function(e){s.prototype.constructor.call(this,e),this.name=e.name},c=function(e){a.prototype.constructor.call(this,e),this.fqn=e.fqn},l=function(e){c.prototype.constructor.call(this,e),this.n4superType=e.n4superType,this.allImplementedInterfaces=e.allImplementedInterfaces,this.annotations=e.annotations,this.ownedMembers=e.ownedMembers||[],this.consumedMembers=e.consumedMembers||[],this.ownedMembers.forEach(function(e){Object.defineProperty(e,"owner",{value:this,enumerable:!1}),i(e)},this)},u=function(e){l.prototype.constructor.call(this,e)},d=function(e){l.prototype.constructor.call(this,e)},p=function(e){a.prototype.constructor.call(this,e),this.owner=e.owner,this.isStatic=e.isStatic||!1},h=function(e){p.prototype.constructor.call(this,e),this.jsFunction=e.jsFunction},f=function(e){p.prototype.constructor.call(this,e)},m=function(e){p.prototype.constructor.call(this,e),this.getter=e.getter},w=function(e){c.prototype.constructor.call(this,e)},y=function(e){Object.prototype.constructor.call(this,e)},v=function(e){c.prototype.constructor.call(this,e)},g=function(e){Object.prototype.constructor.call(this,e)},b=function(e){r.prototype.constructor.call(this,e),this.name=e.name,this.details=e.details,this.target=e.target},k=function(e){Object.prototype.constructor.call(this,e)},O=function(e){this.$__n4err=new Error(e)},M=function(e){Object.prototype.constructor.call(this,e)},S=function(e){Object.prototype.constructor.call(this,e)};t(r,Object,{},{}),t(s,r,{hasAnnotation:{value:function(e){return this.annotations.some(function(t){return t.name===e})}},anyAnnotation:{value:function(e){for(var t=this.annotations.length-1;t>=0;t--){var n=this.annotations[t];if(n.name===e)return n}return null}},allAnnotations:{value:function(e){return this.annotations.filter(function(t){return t.name===e})}}},{}),t(a,s,{},{}),t(c,a,{isClass:{get:function(){return!1}},isInterface:{get:function(){return!1}},isEnum:{get:function(){return!1}}},{of:{value:function(e){return e?e.n4type||e.constructor.n4type:void 0}}}),t(l,c,{members:{value:function(e,t,n){var o=this.ownedMembers.slice();if(e&&(o=o.concat(this.consumedMembers)),t&&this.n4superType instanceof l){var i=this.n4superType.members(e,t,n);o=o.concat(i)}return n||(o=o.filter(function(e){return!e.isStatic})),o}},membersWithAnnotation:{value:function(e,t,n,o){return this.members(t,n,o).filter(function(t){return t.hasAnnotation(e)})}},dataFields:{value:function(e,t,n){return this.members(e,t,n).filter(function(e){return e instanceof f})}},dataFieldsWithAnnotation:{value:function(e,t,n,o){return this.membersWithAnnotation(e,t,n,o).filter(function(e){return e instanceof f})}},methods:{value:function(e,t,n){return this.members(e,t,n).filter(function(e){return e instanceof h})}},methodsWithAnnotation:{value:function(e,t,n,o){return this.membersWithAnnotation(e,t,n,o).filter(function(e){return e instanceof h})}}},{}),t(u,l,{isClass:{get:function(){return!0}}},{}),t(d,l,{isInterface:{get:function(){return!0}}},{}),t(p,a,{},{}),t(h,p,{},{}),t(f,p,{},{}),t(m,p,{isGetter:{value:function(){return this.getter}},isSetter:{value:function(){return!this.getter}}},{}),t(w,c,{isEnum:{get:function(){return!0}}},{}),t(y,Object,{toString:{value:function(){return this.value}}},{findLiteralByName:{value:function(e){for(var t=this.literals.length-1;t>=0;t--)if(this.literals[t].name===e)return this.literals[t]}},findLiteralByValue:{value:function(e){for(var t=this.literals.length-1;t>=0;t--)if(this.literals[t].value===e)return this.literals[t]}}}),t(v,c,{isEnum:{get:function(){return!0}}},{}),t(g,Object,{toString:{value:function(){return this.value}}},{findLiteralByValue:{value:function(e){for(var t=this.literals.length-1;t>=0;t--)if(this.literals[t]===e)return this.literals[t]}}}),t(b,r,{},{}),t(O,Error,{},{}),n(r,new u({name:"N4Object",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Object",n4superType:r.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[],consumedMemebers:[]})),n(s,new u({name:"N4Element",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Element",n4superType:r.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"annotations",getter:!0}),new h({name:"hasAnnotation",jsFunction:s.hasAnnotation}),new h({name:"anyAnnotation",jsFunction:s.anyAnnotation}),new h({name:"allAnnotations",jsFunction:s.allAnnotations}),new m({name:"origin",getter:!0})],consumedMemebers:[]})),n(a,new u({name:"N4NamedElement",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4NamedElement",n4superType:s.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"name",getter:!0})],consumedMemebers:[]})),n(c,new u({name:"N4Type",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Type",n4superType:a.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"fqn",getter:!0}),new h({name:"of",jsFunction:c.of,isStatic:!0}),new m({name:"isClass",getter:!0}),new m({name:"isInterface",getter:!0}),new m({name:"isEnum",getter:!0})],consumedMemebers:[]})),n(l,new u({name:"N4Classifier",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Classifier",n4superType:c.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"n4superType",getter:!0}),new m({name:"allImplementedInterfaces",getter:!0}),new f({name:"ownedMembers"}),new f({name:"consumedMembers"}),new h({name:"constructor"}),new h({name:"members",jsFunction:l.members}),new h({name:"membersWithAnnotation",jsFunction:l.membersWithAnnotation}),new h({name:"dataFields",jsFunction:l.dataFields}),new h({name:"dataFieldsWithAnnotation",jsFunction:l.dataFieldsWithAnnotation}),new h({name:"methods",jsFunction:l.methods}),new h({name:"methodsWithAnnotation",jsFunction:l.methodsWithAnnotation})],consumedMemebers:[]})),n(u,new u({name:"N4Class",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Class",n4superType:l.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"isClass",getter:!0})],consumedMemebers:[]})),n(d,new u({name:"N4Interface",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Interface",n4superType:l.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"isInterface",getter:!0})],consumedMemebers:[]})),n(p,new u({name:"N4Member",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Member",n4superType:a.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"owner",getter:!0}),new m({name:"isStatic",getter:!0})],consumedMemebers:[]})),n(h,new u({name:"N4Method",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Method",n4superType:p.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"jsFunction",getter:!0})],consumedMemebers:[]})),n(f,new u({name:"N4DataField",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4DataField",n4superType:p.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[],consumedMemebers:[]})),n(m,new u({name:"N4Accessor",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Accessor",n4superType:p.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new f({name:"getter"}),new h({name:"isGetter",jsFunction:m.isGetter}),new h({name:"isSetter",jsFunction:m.isSetter})],consumedMemebers:[]})),n(w,new u({name:"N4EnumType",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4EnumType",n4superType:c.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"isEnum",getter:!0})],consumedMemebers:[]})),n(y,new u({name:"N4Enum",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Enum",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"toString",jsFunction:y.toString}),new h({name:"valueByName",jsFunction:y.valueByName,isStatic:!0}),new m({name:"name",getter:!0}),new m({name:"value",getter:!0}),new m({name:"values",getter:!0,isStatic:!0}),new m({name:"n4type",getter:!0})],consumedMemebers:[]})),n(v,new u({name:"N4StringBasedEnumType",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4StringBasedEnumType",n4superType:c.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"isEnum",getter:!0})],consumedMemebers:[]})),n(g,new u({name:"N4StringBasedEnum",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4StringBasedEnum",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"toString",jsFunction:g.toString}),new h({name:"valueByName",jsFunction:g.valueByName,isStatic:!0}),new m({name:"name",getter:!0}),new m({name:"value",getter:!0}),new m({name:"values",getter:!0,isStatic:!0}),new m({name:"n4type",getter:!0})],consumedMemebers:[]})),n(b,new u({name:"N4Annotation",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Annotation",n4superType:r.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"name",getter:!0}),new m({name:"details",getter:!0}),new m({name:"target",getter:!0})],consumedMemebers:[]})),n(k,new d({name:"N4Provider",origin:"n4js-runtime",fqn:"N4BuiltInClasses.N4Provider",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"get",jsFunction:k.get,annotations:[]})],consumedMembers:[]})),n(O,new u({name:"N4ApiNotImplementedError",origin:"N4BuiltInClasses",fqn:"N4BuiltInClasses.N4ApiNotImplementedError",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[],consumedMemebers:[]})),n(M,new d({name:"MigrationController",origin:"n4js-runtime",fqn:"N4BuiltInClasses.MigrationController",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"migrate",isStatic:!1,annotations:[]}),new h({name:"migrateWith",isStatic:!1,annotations:[]}),new m({name:"context",getter:!0,isStatic:!1,annotations:[]})],consumedMembers:[]})),n(S,new d({name:"MigrationContext",origin:"n4js-runtime",fqn:"N4BuiltInClasses.MigrationContext",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"getTrace",isStatic:!1,annotations:[]}),new h({name:"isModified",isStatic:!1,annotations:[]}),new h({name:"setUserData",isStatic:!1,annotations:[]}),new h({name:"getUserData",isStatic:!1,annotations:[]})],consumedMembers:[]})),Object.freeze(r),Object.freeze(s),Object.freeze(a),Object.freeze(c),Object.freeze(l),Object.freeze(u),Object.freeze(d),Object.freeze(p),Object.freeze(h),Object.freeze(f),Object.freeze(m),Object.freeze(w),Object.freeze(y),Object.freeze(v),Object.freeze(g),Object.freeze(k),Object.freeze(O),Object.freeze(M),Object.freeze(S),e.N4Object=r,e.N4Element=s,e.N4NamedElement=a,e.N4Type=c,e.N4Classifier=l,e.N4Class=u,e.N4Interface=d,e.N4Member=p,e.N4Method=h,e.N4DataField=f,e.N4Accessor=m,e.N4EnumType=w,e.N4Enum=y,e.N4StringBasedEnumType=v,e.N4StringBasedEnum=g,e.N4Annotation=b,e.N4Provider=k,e.N4ApiNotImplementedError=O,e.MigrationController=M,e.MigrationContext=S}("object"==typeof e?e:self)}).call(this,n(2))},function(e,t,n){(function(e){!function(e){"use strict";var t=Array.prototype.slice,n=function(){};if("undefined"!=typeof __REACT_HOT_LOADER__){var o=Object.defineProperties.bind(Object),i=Object.defineProperty.bind(Object);Object.defineProperties=function(e,t){for(var n in t){var i=t[n];i.configurable=!0,i.value&&(i.writable=!0)}return o(e,t)},Object.defineProperty=function(e,t,n){return n.configurable=!0,n.value&&(n.writable=!0),i(e,t,n)}}function r(e){var t=e&&e.name;!t||t in this||e.isStatic||!e.jsFunction||(this[t]=e.jsFunction.value)}function s(e){var t=e&&e.n4type;t&&(t.ownedMembers.forEach(r,this),t.consumedMembers.forEach(r,this))}function a(e,t){return!!(e&&e.constructor&&e.constructor.n4type&&e.constructor.n4type.allImplementedInterfaces)&&-1!==e.constructor.n4type.allImplementedInterfaces.indexOf(t)}e.$makeClass=function(e,t,n,o,i,r){"function"==typeof t&&Object.setPrototypeOf(e,t),Object.defineProperties(e,i);var a=Object.create(t.prototype,o);n.forEach(s,a),Object.defineProperty(a,"constructor",{value:e});var c=r(a,e);Object.defineProperty(e,"n4type",{value:c}),e.prototype=a},e.$makeInterface=function(e,t){var n=t(e.$methods,e);Object.defineProperty(e,"n4type",{value:n})},e.$makeEnum=function(t,o,i,r){var s,a,c,l,u;for(Object.setPrototypeOf(t,e.N4Enum),t.prototype=Object.create(e.N4Enum.prototype,{}),Object.defineProperty(t,"n4type",{value:r(n)}),Object.defineProperty(t.prototype,"constructor",{value:t}),s=i.length,l=new Array(s),a=0;a<s;++a)u=new t((c=i[a])[0],c[1]),Object.defineProperty(t,u.name,{enumerable:!0,value:u}),l[a]=u;Object.defineProperty(t,"literals",{value:l})},e.$implements=a,e.$instanceof=function(e,t){switch(typeof e){case"object":case"function":if("object"==typeof t){var n=t.n4type||null;return a(e,n?n.fqn:"")}return e instanceof t}return!1},e.$sliceToArrayForDestruct=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e)){for(var n,o=[],i=e[Symbol.iterator]();!((n=i.next()).done||(o.push(n.value),o.length>=t)););return o}throw new TypeError("Invalid attempt to destructure non-iterable instance")},e.$spawn=function(e){function t(e,t){var i;try{i=this[e](t)}catch(e){return Promise.reject(e)}return i.done?Promise.resolve(i.value):Promise.resolve(i.value).then(n,o)}var n=t.bind(e,"next"),o=t.bind(e,"throw");return n()},e.$n4promisifyFunction=function(e,n,o,i){return new Promise(function(r,s){n.push(function(e,n){i?r(o?t.call(arguments,0):e):e?s(e):r(o?t.call(arguments,1):n)}),e.apply(null,n)})},e.$n4promisifyMethod=function(e,n,o,i,r){return new Promise(function(s,a){o.push(function(e,n){r?s(i?t.call(arguments,0):e):e?a(e):s(i?t.call(arguments,1):n)}),e[n].apply(e,o)})}}("object"==typeof e?e:self)}).call(this,n(2))},function(e,t){function n(e){return Promise.resolve().then(function(){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t})}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id=7},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=n(9),i="function"==typeof Symbol&&Symbol.for,r=i?Symbol.for("react.element"):60103,s=i?Symbol.for("react.portal"):60106,a=i?Symbol.for("react.fragment"):60107,c=i?Symbol.for("react.strict_mode"):60108,l=i?Symbol.for("react.profiler"):60114,u=i?Symbol.for("react.provider"):60109,d=i?Symbol.for("react.context"):60110,p=i?Symbol.for("react.concurrent_mode"):60111,h=i?Symbol.for("react.forward_ref"):60112,f=i?Symbol.for("react.suspense"):60113,m=i?Symbol.for("react.memo"):60115,w=i?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);!function(e,t,n,o,i,r,s,a){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,r,s,a],l=0;(e=Error(t.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function k(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function O(){}function M(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}k.prototype.isReactComponent={},k.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},k.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},O.prototype=k.prototype;var S=M.prototype=new O;S.constructor=M,o(S,k.prototype),S.isPureReactComponent=!0;var P={current:null},j={current:null},N=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var o=void 0,i={},s=null,a=null;if(null!=t)for(o in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(s=""+t.key),t)N.call(t,o)&&!I.hasOwnProperty(o)&&(i[o]=t[o]);var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){for(var l=Array(c),u=0;u<c;u++)l[u]=arguments[u+2];i.children=l}if(e&&e.defaultProps)for(o in c=e.defaultProps)void 0===i[o]&&(i[o]=c[o]);return{$$typeof:r,type:e,key:s,ref:a,props:i,_owner:j.current}}function D(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var q=/\/+/g,A=[];function B(e,t,n,o){if(A.length){var i=A.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=o,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:o,count:0}}function E(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function F(e,t,n){return null==e?0:function e(t,n,o,i){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var c=!1;if(null===t)c=!0;else switch(a){case"string":case"number":c=!0;break;case"object":switch(t.$$typeof){case r:case s:c=!0}}if(c)return o(i,t,""===n?"."+R(t,0):n),1;if(c=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var u=n+R(a=t[l],l);c+=e(a,u,o,i)}else if(u=null===t||"object"!=typeof t?null:"function"==typeof(u=y&&t[y]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),l=0;!(a=t.next()).done;)c+=e(a=a.value,u=n+R(a,l++),o,i);else"object"===a&&v("31","[object Object]"==(o=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":o,"");return c}(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function x(e,t){e.func.call(e.context,t,e.count++)}function _(e,t,n){var o=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?W(e,o,n,function(e){return e}):null!=e&&(D(e)&&(e=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(q,"$&/")+"/")+n)),o.push(e))}function W(e,t,n,o,i){var r="";null!=n&&(r=(""+n).replace(q,"$&/")+"/"),F(e,_,t=B(t,r,o,i)),E(t)}function T(){var e=P.current;return null===e&&v("321"),e}var $={Children:{map:function(e,t,n){if(null==e)return e;var o=[];return W(e,o,null,t,n),o},forEach:function(e,t,n){if(null==e)return e;F(e,x,t=B(null,null,t,n)),E(t)},count:function(e){return F(e,function(){return null},null)},toArray:function(e){var t=[];return W(e,t,null,function(e){return e}),t},only:function(e){return D(e)||v("143"),e}},createRef:function(){return{current:null}},Component:k,PureComponent:M,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:h,render:e}},lazy:function(e){return{$$typeof:w,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return T().useCallback(e,t)},useContext:function(e,t){return T().useContext(e,t)},useEffect:function(e,t){return T().useEffect(e,t)},useImperativeHandle:function(e,t,n){return T().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return T().useLayoutEffect(e,t)},useMemo:function(e,t){return T().useMemo(e,t)},useReducer:function(e,t,n){return T().useReducer(e,t,n)},useRef:function(e){return T().useRef(e)},useState:function(e){return T().useState(e)},Fragment:a,StrictMode:c,Suspense:f,createElement:C,cloneElement:function(e,t,n){null==e&&v("267",e);var i=void 0,s=o({},e.props),a=e.key,c=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(c=t.ref,l=j.current),void 0!==t.key&&(a=""+t.key);var u=void 0;for(i in e.type&&e.type.defaultProps&&(u=e.type.defaultProps),t)N.call(t,i)&&!I.hasOwnProperty(i)&&(s[i]=void 0===t[i]&&void 0!==u?u[i]:t[i])}if(1===(i=arguments.length-2))s.children=n;else if(1<i){u=Array(i);for(var d=0;d<i;d++)u[d]=arguments[d+2];s.children=u}return{$$typeof:r,type:e.type,key:a,ref:c,props:s,_owner:l}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:D,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:l,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:P,ReactCurrentOwner:j,assign:o}},K={default:$},V=K&&$||K;e.exports=V.default||V},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(e){o[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,a=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),c=1;c<arguments.length;c++){for(var l in n=Object(arguments[c]))i.call(n,l)&&(a[l]=n[l]);if(o){s=o(n);for(var u=0;u<s.length;u++)r.call(n,s[u])&&(a[s[u]]=n[s[u]])}}return a}},function(e,t,n){"use strict";n.r(t);n(1);var o=n(3);function i(e){this.row=e&&"row"in e?e.row:void 0,this.col=e&&"col"in e?e.col:void 0}function r(e){this.piece=e&&"piece"in e?e.piece:void 0,this.fromPos=e&&"fromPos"in e?e.fromPos:void 0,this.toPos=e&&"toPos"in e?e.toPos:void 0}$makeClass(i,N4Object,[],{equals:{value:function(e){return this.row==e.row&&this.col==e.col}},getBoardCoordinateRepresentation:{value:function(){return`(${8-this.row+","+String.fromCharCode("a".charCodeAt(0)+this.col)})`}},toString:{value:function(){return`(${this.row},${this.col})`}},row:{value:void 0,writable:!0},col:{value:void 0,writable:!0}},{},function(e,t){return new N4Class({name:"Coordinate",origin:"chess-react",fqn:"Coordinate.Coordinate",n4superType:N4Object.n4type,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"row",isStatic:!1,annotations:[]}),new N4DataField({name:"col",isStatic:!1,annotations:[]}),new N4Method({name:"constructor",isStatic:!1,jsFunction:e.constructor,annotations:[]}),new N4Method({name:"equals",isStatic:!1,jsFunction:e.equals,annotations:[]}),new N4Method({name:"getBoardCoordinateRepresentation",isStatic:!1,jsFunction:e.getBoardCoordinateRepresentation,annotations:[]}),new N4Method({name:"toString",isStatic:!1,jsFunction:e.toString,annotations:[]})],consumedMembers:[],annotations:[]})}),$makeClass(r,N4Object,[],{toString:{value:function(){return this.piece+" "+this.fromPos.getBoardCoordinateRepresentation()+"→"+this.toPos.getBoardCoordinateRepresentation()}},piece:{value:void 0,writable:!0},fromPos:{value:void 0,writable:!0},toPos:{value:void 0,writable:!0}},{},function(e,t){return new N4Class({name:"Move",origin:"chess-react",fqn:"Move.Move",n4superType:N4Object.n4type,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"piece",isStatic:!1,annotations:[]}),new N4DataField({name:"fromPos",isStatic:!1,annotations:[]}),new N4DataField({name:"toPos",isStatic:!1,annotations:[]}),new N4Method({name:"constructor",isStatic:!1,jsFunction:e.constructor,annotations:[]}),new N4Method({name:"toString",isStatic:!1,jsFunction:e.toString,annotations:[]})],consumedMembers:[],annotations:[]})});var s=n(0),a={$fieldInit:function(e,t){e?t.hasOwnProperty("label")||this.hasOwnProperty("label")||(this.label="label"in e?e.label:void 0):t.hasOwnProperty("label")||this.hasOwnProperty("label")||(this.label=void 0)},$methods:{}};$makeInterface(a,function(e,t){return new N4Interface({name:"CoordinateSquareProps",origin:"chess-react",fqn:"components.CoordinateSquare.CoordinateSquareProps",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"label",isStatic:!1,annotations:[]})],consumedMembers:[],annotations:[]})});const c={fontSize:"2vw",textAlign:"center",display:"flex",justifyContent:"center",alignItems:"center",width:"100%",height:"100%"};function l(e){s.Component.prototype.constructor.call(this,e)}$makeClass(l,s.Component,[],{render:{value:function(){return s.createElement("div",Object.assign({style:c}),this.props.label)}}},{},function(e,t){return new N4Class({name:"LabelSquare",origin:"chess-react",fqn:"components.CoordinateSquare.LabelSquare",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4Method({name:"render",isStatic:!1,jsFunction:e.render,annotations:[]})],consumedMembers:[],annotations:[]})}),Object.defineProperty(l,"$di",{value:{superType:s.Component,fieldsInjectedTypes:[]}});var u={$fieldInit:function(e,t){e?(t.hasOwnProperty("isWhite")||this.hasOwnProperty("isWhite")||(this.isWhite="isWhite"in e?e.isWhite:void 0),t.hasOwnProperty("piece")||this.hasOwnProperty("piece")||(this.piece="piece"in e?e.piece:void 0),t.hasOwnProperty("onClick")||this.hasOwnProperty("onClick")||(this.onClick="onClick"in e?e.onClick:void 0),t.hasOwnProperty("isPicked")||this.hasOwnProperty("isPicked")||(this.isPicked="isPicked"in e?e.isPicked:void 0),t.hasOwnProperty("isValidDestination")||this.hasOwnProperty("isValidDestination")||(this.isValidDestination="isValidDestination"in e?e.isValidDestination:void 0)):(t.hasOwnProperty("isWhite")||this.hasOwnProperty("isWhite")||(this.isWhite=void 0),t.hasOwnProperty("piece")||this.hasOwnProperty("piece")||(this.piece=void 0),t.hasOwnProperty("onClick")||this.hasOwnProperty("onClick")||(this.onClick=void 0),t.hasOwnProperty("isPicked")||this.hasOwnProperty("isPicked")||(this.isPicked=void 0),t.hasOwnProperty("isValidDestination")||this.hasOwnProperty("isValidDestination")||(this.isValidDestination=void 0))},$methods:{}};$makeInterface(u,function(e,t){return new N4Interface({name:"SquareProps",origin:"chess-react",fqn:"components.Square.SquareProps",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"isWhite",isStatic:!1,annotations:[]}),new N4DataField({name:"piece",isStatic:!1,annotations:[]}),new N4DataField({name:"onClick",isStatic:!1,annotations:[]}),new N4DataField({name:"isPicked",isStatic:!1,annotations:[]}),new N4DataField({name:"isValidDestination",isStatic:!1,annotations:[]})],consumedMembers:[],annotations:[]})});const d={display:"flex",justifyContent:"center",alignItems:"center",width:"100%",height:"100%",fontSize:"5vw"};function p(e){let t=e.isWhite?"#EADAB9":"#C2A482";return e.isPicked?t="lime":e.isValidDestination&&(t="yellow"),s.createElement("div",Object.assign({style:Object.assign({},d,{backgroundColor:t}),onClick:e.onClick}),e.piece)}var h={$fieldInit:function(e,t){e?(t.hasOwnProperty("squares")||this.hasOwnProperty("squares")||(this.squares="squares"in e?e.squares:void 0),t.hasOwnProperty("pickedSquare")||this.hasOwnProperty("pickedSquare")||(this.pickedSquare="pickedSquare"in e?e.pickedSquare:void 0),t.hasOwnProperty("validDestinations")||this.hasOwnProperty("validDestinations")||(this.validDestinations="validDestinations"in e?e.validDestinations:void 0),t.hasOwnProperty("onClick")||this.hasOwnProperty("onClick")||(this.onClick="onClick"in e?e.onClick:void 0)):(t.hasOwnProperty("squares")||this.hasOwnProperty("squares")||(this.squares=void 0),t.hasOwnProperty("pickedSquare")||this.hasOwnProperty("pickedSquare")||(this.pickedSquare=void 0),t.hasOwnProperty("validDestinations")||this.hasOwnProperty("validDestinations")||(this.validDestinations=void 0),t.hasOwnProperty("onClick")||this.hasOwnProperty("onClick")||(this.onClick=void 0))},$methods:{}};$makeInterface(h,function(e,t){return new N4Interface({name:"BoardProps",origin:"chess-react",fqn:"components.Board.BoardProps",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"squares",isStatic:!1,annotations:[]}),new N4DataField({name:"pickedSquare",isStatic:!1,annotations:[]}),new N4DataField({name:"validDestinations",isStatic:!1,annotations:[]}),new N4DataField({name:"onClick",isStatic:!1,annotations:[]})],consumedMembers:[],annotations:[]})});const f={display:"flex",flexWrap:"wrap",width:"100%",height:"100%"},m={width:"10%",height:"10%"};function w(e){s.Component.prototype.constructor.call(this,e)}$makeClass(w,s.Component,[],{renderSquare:{value:function(e,t,n,o,i){return s.createElement("div",Object.assign({style:m}),s.createElement(p,Object.assign({isWhite:t,isPicked:n,isValidDestination:o,piece:i,onClick:()=>this.props.onClick(e)})))}},renderCoordinateSquare:{value:function(e){return s.createElement("div",Object.assign({style:m}),s.createElement(l,Object.assign({label:e})))}},renderSquares:{value:function(){const e=new Array;let t=!0;e.push(this.renderCoordinateSquare(""));for(let t=0;t<8;t++)e.push(this.renderCoordinateSquare(String.fromCharCode("a".charCodeAt(0)+t)));e.push(this.renderCoordinateSquare(""));for(let n=0;n<8;n++){e.push(this.renderCoordinateSquare((8-n).toString()));let o=t;for(let t=0;t<8;t++){const r=new i({row:n,col:t}),s=this.props.validDestinations.findIndex(e=>e.equals(r))>=0;e.push(this.renderSquare(r,o,!(!this.props.pickedSquare||!this.props.pickedSquare.equals(r)),s,this.props.squares[r.row][r.col])),o=!o}t=!t,e.push(this.renderCoordinateSquare((8-n).toString()))}e.push(this.renderCoordinateSquare(""));for(let t=0;t<8;t++)e.push(this.renderCoordinateSquare(String.fromCharCode("a".charCodeAt(0)+t)));return e.push(this.renderCoordinateSquare("")),e}},render:{value:function(){return s.createElement("div",Object.assign({style:f}),this.renderSquares())}}},{},function(e,t){return new N4Class({name:"Board",origin:"chess-react",fqn:"components.Board.Board",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4Method({name:"renderSquare",isStatic:!1,jsFunction:e.renderSquare,annotations:[]}),new N4Method({name:"renderCoordinateSquare",isStatic:!1,jsFunction:e.renderCoordinateSquare,annotations:[]}),new N4Method({name:"renderSquares",isStatic:!1,jsFunction:e.renderSquares,annotations:[]}),new N4Method({name:"render",isStatic:!1,jsFunction:e.render,annotations:[]})],consumedMembers:[],annotations:[]})}),Object.defineProperty(w,"$di",{value:{superType:s.Component,fieldsInjectedTypes:[]}});var y={$fieldInit:function(e,t){e?(t.hasOwnProperty("squares")||this.hasOwnProperty("squares")||(this.squares="squares"in e?e.squares:void 0),t.hasOwnProperty("lastMoves")||this.hasOwnProperty("lastMoves")||(this.lastMoves="lastMoves"in e?e.lastMoves:void 0),t.hasOwnProperty("whiteKingMoved")||this.hasOwnProperty("whiteKingMoved")||(this.whiteKingMoved="whiteKingMoved"in e?e.whiteKingMoved:void 0),t.hasOwnProperty("leftWhiteRookMoved")||this.hasOwnProperty("leftWhiteRookMoved")||(this.leftWhiteRookMoved="leftWhiteRookMoved"in e?e.leftWhiteRookMoved:void 0),t.hasOwnProperty("rightWhiteRookMoved")||this.hasOwnProperty("rightWhiteRookMoved")||(this.rightWhiteRookMoved="rightWhiteRookMoved"in e?e.rightWhiteRookMoved:void 0),t.hasOwnProperty("blackKingMoved")||this.hasOwnProperty("blackKingMoved")||(this.blackKingMoved="blackKingMoved"in e?e.blackKingMoved:void 0),t.hasOwnProperty("leftBlackRookMoved")||this.hasOwnProperty("leftBlackRookMoved")||(this.leftBlackRookMoved="leftBlackRookMoved"in e?e.leftBlackRookMoved:void 0),t.hasOwnProperty("rightBlackRookMoved")||this.hasOwnProperty("rightBlackRookMoved")||(this.rightBlackRookMoved="rightBlackRookMoved"in e?e.rightBlackRookMoved:void 0)):(t.hasOwnProperty("squares")||this.hasOwnProperty("squares")||(this.squares=void 0),t.hasOwnProperty("lastMoves")||this.hasOwnProperty("lastMoves")||(this.lastMoves=void 0),t.hasOwnProperty("whiteKingMoved")||this.hasOwnProperty("whiteKingMoved")||(this.whiteKingMoved=void 0),t.hasOwnProperty("leftWhiteRookMoved")||this.hasOwnProperty("leftWhiteRookMoved")||(this.leftWhiteRookMoved=void 0),t.hasOwnProperty("rightWhiteRookMoved")||this.hasOwnProperty("rightWhiteRookMoved")||(this.rightWhiteRookMoved=void 0),t.hasOwnProperty("blackKingMoved")||this.hasOwnProperty("blackKingMoved")||(this.blackKingMoved=void 0),t.hasOwnProperty("leftBlackRookMoved")||this.hasOwnProperty("leftBlackRookMoved")||(this.leftBlackRookMoved=void 0),t.hasOwnProperty("rightBlackRookMoved")||this.hasOwnProperty("rightBlackRookMoved")||(this.rightBlackRookMoved=void 0))},$methods:{}};$makeInterface(y,function(e,t){return new N4Interface({name:"Snapshot",origin:"chess-react",fqn:"components.Game.Snapshot",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"squares",isStatic:!1,annotations:[]}),new N4DataField({name:"lastMoves",isStatic:!1,annotations:[]}),new N4DataField({name:"whiteKingMoved",isStatic:!1,annotations:[]}),new N4DataField({name:"leftWhiteRookMoved",isStatic:!1,annotations:[]}),new N4DataField({name:"rightWhiteRookMoved",isStatic:!1,annotations:[]}),new N4DataField({name:"blackKingMoved",isStatic:!1,annotations:[]}),new N4DataField({name:"leftBlackRookMoved",isStatic:!1,annotations:[]}),new N4DataField({name:"rightBlackRookMoved",isStatic:!1,annotations:[]})],consumedMembers:[],annotations:[]})});var v={};function g(e){s.Component.prototype.constructor.call(this,e);this.state={history:[{squares:[["♖","♘","♗","♕","♔","♗","♘","♖"],["♙","♙","♙","♙","♙","♙","♙","♙"],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],["♟","♟","♟","♟","♟","♟","♟","♟"],["♜","♞","♝","♛","♚","♝","♞","♜"]],lastMoves:new Array,whiteKingMoved:!1,leftWhiteRookMoved:!1,rightWhiteRookMoved:!1,blackKingMoved:!1,leftBlackRookMoved:!1,rightBlackRookMoved:!1}],stepNumber:0,whiteIsNext:!0,pickedSquare:null,validDestinations:new Array}}v.$fieldInit=function(e,t){e?(t.hasOwnProperty("history")||this.hasOwnProperty("history")||(this.history="history"in e?e.history:void 0),t.hasOwnProperty("stepNumber")||this.hasOwnProperty("stepNumber")||(this.stepNumber="stepNumber"in e?e.stepNumber:void 0),t.hasOwnProperty("whiteIsNext")||this.hasOwnProperty("whiteIsNext")||(this.whiteIsNext="whiteIsNext"in e?e.whiteIsNext:void 0),t.hasOwnProperty("pickedSquare")||this.hasOwnProperty("pickedSquare")||(this.pickedSquare="pickedSquare"in e?e.pickedSquare:void 0),t.hasOwnProperty("validDestinations")||this.hasOwnProperty("validDestinations")||(this.validDestinations="validDestinations"in e?e.validDestinations:void 0)):(t.hasOwnProperty("history")||this.hasOwnProperty("history")||(this.history=void 0),t.hasOwnProperty("stepNumber")||this.hasOwnProperty("stepNumber")||(this.stepNumber=void 0),t.hasOwnProperty("whiteIsNext")||this.hasOwnProperty("whiteIsNext")||(this.whiteIsNext=void 0),t.hasOwnProperty("pickedSquare")||this.hasOwnProperty("pickedSquare")||(this.pickedSquare=void 0),t.hasOwnProperty("validDestinations")||this.hasOwnProperty("validDestinations")||(this.validDestinations=void 0))},v.$methods={},$makeInterface(v,function(e,t){return new N4Interface({name:"GameState",origin:"chess-react",fqn:"components.Game.GameState",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"history",isStatic:!1,annotations:[]}),new N4DataField({name:"stepNumber",isStatic:!1,annotations:[]}),new N4DataField({name:"whiteIsNext",isStatic:!1,annotations:[]}),new N4DataField({name:"pickedSquare",isStatic:!1,annotations:[]}),new N4DataField({name:"validDestinations",isStatic:!1,annotations:[]})],consumedMembers:[],annotations:[]})}),$makeClass(g,s.Component,[],{handleClick:{value:function(e){const t=e.row,n=e.col,o=this.state.history.slice(0,this.state.stepNumber+1),i=o[o.length-1],s=this.state.pickedSquare;let a=i.squares;if(this.calculateWinner(a))return;const c=a[t][n];if(this.isWhitepiece(c)&&this.state.whiteIsNext||this.isBlackpiece(c)&&!this.state.whiteIsNext){const t=this.calculateValidDestinations(a,c,e);return void this.setState({pickedSquare:e,validDestinations:t})}if(!s)return;const l=new r({piece:a[s.row][s.col],fromPos:s,toPos:e});if(this.isValidMove(a,l)){const{squares:e,moves:t}=this.move(l);let n=i.whiteKingMoved,r=i.leftWhiteRookMoved,a=i.rightWhiteRookMoved,c=i.blackKingMoved,u=i.leftBlackRookMoved,d=i.rightBlackRookMoved;this.isWhitepiece(l.piece)?(n=n||"♔"==l.piece,r=r||"♖"==l.piece&&0==s.col,a=a||"♖"==l.piece&&7==s.col):(c=c||"♚"==l.piece,u=u||"♜"==l.piece&&0==s.col,d=d||"♜"==l.piece&&7==s.col),this.setState({history:o.concat([{squares:e,lastMoves:t,whiteKingMoved:n,leftWhiteRookMoved:r,rightWhiteRookMoved:a,blackKingMoved:c,leftBlackRookMoved:u,rightBlackRookMoved:d}]),stepNumber:o.length,whiteIsNext:!this.state.whiteIsNext,pickedSquare:null,validDestinations:new Array})}else this.setState({pickedSquare:null,validDestinations:new Array})}},goToStep:{value:function(e){this.setState({stepNumber:e,whiteIsNext:e%2==0,pickedSquare:null,validDestinations:new Array})}},getAllPiecesSameColor:{value:function(e,t){const n=new Array;for(let o=0;o<8;o++)for(let r=0;r<8;r++)(t&&this.isWhitepiece(e[o][r])||!t&&this.isBlackpiece(e[o][r]))&&n.push({piece:e[o][r],pos:new i({row:o,col:r})});return n}},forAll:{value:function(e,t){return e.reduce((e,n)=>e&&t(n),!0)}},calculateWinner:{value:function(e){const t=this.state.whiteIsNext,n=this.getAllPiecesSameColor(e,t);return this.forAll(n,t=>0==this.calculateValidDestinations(e,t.piece,t.pos).length)?t?"Black":"White":null}},calculateValidDestinations:{value:function(e,t,n){const o=this.calculateAttackedDestinations(e,t,n),s=this.isWhitepiece(t);if("♙"==t||"♟"==t)if(s&&n.row<7){const t=new i({row:n.row+1,col:n.col});if(e[t.row][t.col]||o.push(t),n.row<=1){const r=new i({row:n.row+2,col:n.col});e[t.row][t.col]||e[r.row][r.col]||o.push(r)}}else if(!s&&n.row>0){const t=new i({row:n.row-1,col:n.col});if(e[t.row][t.col]||o.push(t),n.row>=6){const r=new i({row:n.row-2,col:n.col});e[t.row][t.col]||e[r.row][r.col]||o.push(r)}}const a=this.state.history[this.state.stepNumber];return"♔"==t&&s&&!a.whiteKingMoved?(a.leftWhiteRookMoved||e[n.row][n.col-1]||e[n.row][n.col-2]||e[n.row][n.col-3]||o.push(new i({row:n.row,col:n.col-2})),a.rightWhiteRookMoved||e[n.row][n.col+1]||e[n.row][n.col+2]||o.push(new i({row:n.row,col:n.col+2}))):"♚"!=t||s||a.blackKingMoved||(a.leftBlackRookMoved||e[n.row][n.col-1]||e[n.row][n.col-2]||e[n.row][n.col-3]||o.push(new i({row:n.row,col:n.col-2})),a.rightBlackRookMoved||e[n.row][n.col+1]||e[n.row][n.col+2]||o.push(new i({row:n.row,col:n.col+2}))),o.filter(e=>!this.isKingInCheckIfMove(new r({piece:t,fromPos:n,toPos:e})))}},isValidMove:{value:function(e,t){return this.calculateValidDestinations(e,t.piece,t.fromPos).findIndex(e=>e.equals(t.toPos))>=0}},isInsideBoard:{value:function(e){return 0<=e.row&&e.row<8&&0<=e.col&&e.col<8}},calculateKnightAttackingDestinations:{value:function(e,t,n){return[[-1,-2],[-2,-1],[-2,1],[-1,2],[1,2],[2,1],[2,-1],[1,-2]].map(e=>new i({row:n.row+e[0],col:n.col+e[1]})).filter(n=>this.isInsideBoard(n)&&!this.isPositionOccupiedBypieceSameColor(e,t,n))}},calculateRookAttackingDestinations:{value:function(e,t,n){const o=n.row,r=n.col,s=new Array,a=[[-1,0],[1,0],[0,-1],[0,1]];for(let n of a){let a=new i({row:o+n[0],col:r+n[1]});for(;this.isInsideBoard(a);){if(e[a.row][a.col]){if(this.isPositionOccupiedBypieceSameColor(e,t,a))break;if(this.isPositionOccupiedBypieceOtherColor(e,t,a)){s.push(a);break}}else s.push(a);a=new i({row:a.row+n[0],col:a.col+n[1]})}}return s}},calculateBishopAttackingDestinations:{value:function(e,t,n){const o=n.row,r=n.col,s=new Array,a=[[-1,-1],[-1,1],[1,1],[1,-1]];for(let n of a){let a=new i({row:o+n[0],col:r+n[1]});for(;this.isInsideBoard(a);){if(e[a.row][a.col]){if(this.isPositionOccupiedBypieceSameColor(e,t,a))break;if(this.isPositionOccupiedBypieceOtherColor(e,t,a)){s.push(a);break}}else s.push(a);a=new i({row:a.row+n[0],col:a.col+n[1]})}}return s}},calculateQueenAttackingDestinations:{value:function(e,t,n){return this.isWhitepiece(t)?this.calculateRookAttackingDestinations(e,"♖",n).concat(this.calculateBishopAttackingDestinations(e,"♗",n)):this.calculateRookAttackingDestinations(e,"♜",n).concat(this.calculateBishopAttackingDestinations(e,"♝",n))}},calculateKingAttackingDestinations:{value:function(e,t,n){return[[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1]].map(e=>new i({row:n.row+e[0],col:n.col+e[1]})).filter(n=>this.isInsideBoard(n)&&!this.isPositionOccupiedBypieceSameColor(e,t,n))}},calculatePawnAttackingDestinations:{value:function(e,t,n){const o=new Array,r=this.isWhitepiece(t);if(r&&n.row<7)for(let r of[1,-1]){const s=new i({row:n.row+1,col:n.col+r});this.isInsideBoard(s)&&this.isPositionOccupiedBypieceOtherColor(e,t,s)&&o.push(s)}else if(!r&&n.row>0)for(let r of[1,-1]){const s=new i({row:n.row-1,col:n.col+r});this.isInsideBoard(s)&&this.isPositionOccupiedBypieceOtherColor(e,t,s)&&o.push(s)}return o}},calculateAttackedDestinations:{value:function(e,t,n){let o=new Array;switch(t){case"♘":case"♞":o=this.calculateKnightAttackingDestinations(e,t,n);break;case"♖":case"♜":o=this.calculateRookAttackingDestinations(e,t,n);break;case"♗":case"♝":o=this.calculateBishopAttackingDestinations(e,t,n);break;case"♕":case"♛":o=this.calculateQueenAttackingDestinations(e,t,n);break;case"♔":case"♚":o=this.calculateKingAttackingDestinations(e,t,n);break;case"♔":case"♚":o=this.calculateKingAttackingDestinations(e,t,n);break;case"♙":case"♟":o=this.calculatePawnAttackingDestinations(e,t,n)}return o}},isKingInCheckIfMove:{value:function(e){const{squares:t}=this.move(e),n=this.isWhitepiece(e.piece),o=this.getKingPosition(t,n);return!!o&&this.isKingInCheck(t,n?"♔":"♚",o)}},isKingInCheck:{value:function(e,t,n){if("♔"!=t&&"♚"!=t)throw"The input piece is not a king";const o="♔"==t?this.getPiecesOfSameColor(e,!1):this.getPiecesOfSameColor(e,!0);let i=new Array;for(let t of o){const n=this.calculateAttackedDestinations(e,t.piece,t.pos);i=i.concat(n)}return!!i.find(e=>e.equals(n))}},getPiecesOfSameColor:{value:function(e,t){const n=new Array;for(let o=0;o<e.length;o++)for(let r=0;r<e[o].length;r++)(t?this.isWhitepiece(e[o][r]):this.isBlackpiece(e[o][r]))&&n.push({piece:e[o][r],pos:new i({row:o,col:r})});return n}},getKingPosition:{value:function(e,t){for(let n=0;n<e.length;n++)for(let o=0;o<e[n].length;o++)if(t?"♔"==e[n][o]:"♚"==e[n][o])return new i({row:n,col:o});return null}},isPositionOccupiedBypieceSameColor:{value:function(e,t,n){const o=this.isWhitepiece(t);return!(!o||!this.isWhitepiece(e[n.row][n.col]))||!(o||!this.isBlackpiece(e[n.row][n.col]))}},isPositionOccupiedBypieceOtherColor:{value:function(e,t,n){const o=this.isWhitepiece(t);return!(!o||!this.isBlackpiece(e[n.row][n.col]))||!(o||!this.isWhitepiece(e[n.row][n.col]))}},getCurrentSnapshot:{value:function(){return this.state.history[this.state.stepNumber]}},move:{value:function(e){const t=e.piece,n=e.fromPos,o=e.toPos,s=this.getCurrentSnapshot().squares,a=s.map(e=>e.slice()),c=new Array;if(this.isCastlingMove(t,n,o)){let e,l;c.push(new r({piece:t,fromPos:new i({row:n.row,col:n.col}),toPos:new i({row:o.row,col:o.col})})),a[o.row][o.col]=t,a[n.row][n.col]=null,"♔"==t?o.col<n.col?(e=new i({row:0,col:0}),l=new i({row:0,col:3})):(e=new i({row:0,col:7}),l=new i({row:0,col:5})):o.col<n.col?(e=new i({row:7,col:0}),l=new i({row:7,col:3})):(e=new i({row:7,col:7}),l=new i({row:7,col:5})),c.push(new r({piece:s[e.row][e.col],fromPos:e,toPos:l})),a[l.row][l.col]=s[e.row][e.col],a[e.row][e.col]=null}else{const t=s[n.row][n.col];a[o.row][o.col]=t,a[n.row][n.col]=null,c.push(e)}return{squares:a,moves:c}}},isCastlingMove:{value:function(e,t,n){const o=this.getCurrentSnapshot();return"♔"==e&&!o.whiteKingMoved&&2==Math.abs(n.col-t.col)||"♚"==e&&!o.blackKingMoved&&2==Math.abs(n.col-t.col)}},isLeftWhiteRook:{value:function(e,t){return"♖"==e&&0==t.row&&0==t.col}},isWhitepiece:{value:function(e){switch(e){case"♙":case"♖":case"♘":case"♗":case"♕":case"♔":return!0;default:return!1}}},isBlackpiece:{value:function(e){switch(e){case"♟":case"♜":case"♞":case"♝":case"♛":case"♚":return!0;default:return!1}}},render:{value:function(){const e=this.state.history,t=e[this.state.stepNumber],n=this.calculateWinner(t.squares),o=e.map((e,t)=>{const n=t?"Go to move #"+t:"Go to game start",o={textAlign:"center",verticalAlign:"middle",padding:"5px",position:"relative"};return s.createElement(s.Fragment,null,s.createElement("tr",null,s.createElement("td",Object.assign({style:o}),t),s.createElement("td",Object.assign({style:o}),e.lastMoves.join(",")),s.createElement("td",Object.assign({style:o}),s.createElement("button",Object.assign({style:{backgroundColor:"green",border:"none",color:"white",padding:"4px",textAlign:"center",textDecoration:"none",display:"inline-block"},onClick:()=>this.goToStep(t)}),n))))});let i;i=n?"Winner: "+n:"Next player: "+(this.state.whiteIsNext?"White":"Black");return s.createElement("div",Object.assign({style:{display:"flex",flexDirection:"row"}}),s.createElement("div",Object.assign({style:{width:"60vw",height:"60vw"}}),s.createElement(w,Object.assign({squares:t.squares,pickedSquare:this.state.pickedSquare,validDestinations:this.state.validDestinations,onClick:e=>this.handleClick(e)}))),s.createElement("div",Object.assign({style:{marginTop:"20px",marginLeft:"20px",width:"40vw",fontSize:"1.5vw"}}),s.createElement("div",null,i),s.createElement("p",null),s.createElement("table",Object.assign({style:{width:"100%"}}),s.createElement("tr",null,s.createElement("th",Object.assign({style:{width:"10%"}}),"Step"),s.createElement("th",Object.assign({style:{width:"45%"}}),"Move"),s.createElement("th",Object.assign({style:{width:"45%"}}),"Action")),o)))}}},{},function(e,t){return new N4Class({name:"Game",origin:"chess-react",fqn:"components.Game.Game",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4Method({name:"constructor",isStatic:!1,jsFunction:e.constructor,annotations:[]}),new N4Method({name:"handleClick",isStatic:!1,jsFunction:e.handleClick,annotations:[]}),new N4Method({name:"goToStep",isStatic:!1,jsFunction:e.goToStep,annotations:[]}),new N4Method({name:"getAllPiecesSameColor",isStatic:!1,jsFunction:e.getAllPiecesSameColor,annotations:[]}),new N4Method({name:"forAll",isStatic:!1,jsFunction:e.forAll,annotations:[]}),new N4Method({name:"calculateWinner",isStatic:!1,jsFunction:e.calculateWinner,annotations:[]}),new N4Method({name:"calculateValidDestinations",isStatic:!1,jsFunction:e.calculateValidDestinations,annotations:[]}),new N4Method({name:"isValidMove",isStatic:!1,jsFunction:e.isValidMove,annotations:[]}),new N4Method({name:"isInsideBoard",isStatic:!1,jsFunction:e.isInsideBoard,annotations:[]}),new N4Method({name:"calculateKnightAttackingDestinations",isStatic:!1,jsFunction:e.calculateKnightAttackingDestinations,annotations:[]}),new N4Method({name:"calculateRookAttackingDestinations",isStatic:!1,jsFunction:e.calculateRookAttackingDestinations,annotations:[]}),new N4Method({name:"calculateBishopAttackingDestinations",isStatic:!1,jsFunction:e.calculateBishopAttackingDestinations,annotations:[]}),new N4Method({name:"calculateQueenAttackingDestinations",isStatic:!1,jsFunction:e.calculateQueenAttackingDestinations,annotations:[]}),new N4Method({name:"calculateKingAttackingDestinations",isStatic:!1,jsFunction:e.calculateKingAttackingDestinations,annotations:[]}),new N4Method({name:"calculatePawnAttackingDestinations",isStatic:!1,jsFunction:e.calculatePawnAttackingDestinations,annotations:[]}),new N4Method({name:"calculateAttackedDestinations",isStatic:!1,jsFunction:e.calculateAttackedDestinations,annotations:[]}),new N4Method({name:"isKingInCheckIfMove",isStatic:!1,jsFunction:e.isKingInCheckIfMove,annotations:[]}),new N4Method({name:"isKingInCheck",isStatic:!1,jsFunction:e.isKingInCheck,annotations:[]}),new N4Method({name:"getPiecesOfSameColor",isStatic:!1,jsFunction:e.getPiecesOfSameColor,annotations:[]}),new N4Method({name:"getKingPosition",isStatic:!1,jsFunction:e.getKingPosition,annotations:[]}),new N4Method({name:"isPositionOccupiedBypieceSameColor",isStatic:!1,jsFunction:e.isPositionOccupiedBypieceSameColor,annotations:[]}),new N4Method({name:"isPositionOccupiedBypieceOtherColor",isStatic:!1,jsFunction:e.isPositionOccupiedBypieceOtherColor,annotations:[]}),new N4Method({name:"getCurrentSnapshot",isStatic:!1,jsFunction:e.getCurrentSnapshot,annotations:[]}),new N4Method({name:"move",isStatic:!1,jsFunction:e.move,annotations:[]}),new N4Method({name:"isCastlingMove",isStatic:!1,jsFunction:e.isCastlingMove,annotations:[]}),new N4Method({name:"isLeftWhiteRook",isStatic:!1,jsFunction:e.isLeftWhiteRook,annotations:[]}),new N4Method({name:"isWhitepiece",isStatic:!1,jsFunction:e.isWhitepiece,annotations:[]}),new N4Method({name:"isBlackpiece",isStatic:!1,jsFunction:e.isBlackpiece,annotations:[]}),new N4Method({name:"render",isStatic:!1,jsFunction:e.render,annotations:[]})],consumedMembers:[],annotations:[]})}),Object.defineProperty(g,"$di",{value:{superType:s.Component,fieldsInjectedTypes:[]}}),n(4).render(o.createElement(g,null),document.getElementById("chessAppMountPoint"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,