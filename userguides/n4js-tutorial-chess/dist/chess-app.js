!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!S[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--y&&0===v&&N()}(e,n),t&&t(e,n)};var n,o=!0,i="c1da30c244624ab134f6",r=1e4,a={},s=[],c=[];function l(e){var t=O[e];if(!t)return C;var o=function(o){return t.hot.active?(O[o]?-1===O[o].parents.indexOf(e)&&O[o].parents.push(e):(s=[e],n=o),-1===t.children.indexOf(o)&&t.children.push(o)):(console.warn("[HMR] unexpected require("+o+") from disposed module "+e),s=[]),C(o)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return C[e]},set:function(t){C[e]=t}}};for(var r in C)Object.prototype.hasOwnProperty.call(C,r)&&"e"!==r&&"t"!==r&&Object.defineProperty(o,r,i(r));return o.e=function(e){return"ready"===f&&p("prepare"),v++,C.e(e).then(t,(function(e){throw t(),e}));function t(){v--,"prepare"===f&&(g[e]||k(e),0===v&&0===y&&N())}},o.t=function(e,t){return 1&t&&(e=o(e)),C.t(e,-2&t)},o}function u(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var o=0;o<e.length;o++)t._acceptedDependencies[e[o]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:M,apply:I,status:function(e){if(!e)return f;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:a[e]};return n=void 0,t}var d=[],f="idle";function p(e){f=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var m,h,w,y=0,v=0,g={},b={},S={};function j(e){return+e+""===e?+e:e}function M(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return o=e,p("check"),(t=r,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var o=new XMLHttpRequest,r=C.p+""+i+".hot-update.json";o.open("GET",r,!0),o.timeout=t,o.send(null)}catch(e){return n(e)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)n(new Error("Manifest request to "+r+" timed out."));else if(404===o.status)e();else if(200!==o.status&&304!==o.status)n(new Error("Manifest request to "+r+" failed."));else{try{var t=JSON.parse(o.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return p("idle"),null;b={},g={},S=e.c,w=e.h,p("prepare");var t=new Promise((function(e,t){m={resolve:e,reject:t}}));h={};return k(0),"prepare"===f&&0===v&&0===y&&N(),t}));var t}function k(e){S[e]?(b[e]=!0,y++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=C.p+""+e+"."+i+".hot-update.js",document.head.appendChild(t)}(e)):g[e]=!0}function N(){p("ready");var e=m;if(m=null,e)if(o)Promise.resolve().then((function(){return I(o)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(j(n));e.resolve(t)}}function I(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,o,r,c,l;function u(e){for(var t=[e],n={},o=t.map((function(e){return{chain:[e],id:e}}));o.length>0;){var i=o.pop(),r=i.id,a=i.chain;if((c=O[r])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:r};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:r};for(var s=0;s<c.parents.length;s++){var l=c.parents[s],u=O[l];if(u){if(u.hot._declinedDependencies[r])return{type:"declined",chain:a.concat([l]),moduleId:r,parentId:l};-1===t.indexOf(l)&&(u.hot._acceptedDependencies[r]?(n[l]||(n[l]=[]),d(n[l],[r])):(delete n[l],t.push(l),o.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function d(e,t){for(var n=0;n<t.length;n++){var o=t[n];-1===e.indexOf(o)&&e.push(o)}}t=t||{};var m={},y=[],v={},g=function(){console.warn("[HMR] unexpected require("+M.moduleId+") to disposed module")};for(var b in h)if(Object.prototype.hasOwnProperty.call(h,b)){var M;l=j(b);var k=!1,N=!1,I=!1,P="";switch((M=h[b]?u(l):{type:"disposed",moduleId:b}).chain&&(P="\nUpdate propagation: "+M.chain.join(" -> ")),M.type){case"self-declined":t.onDeclined&&t.onDeclined(M),t.ignoreDeclined||(k=new Error("Aborted because of self decline: "+M.moduleId+P));break;case"declined":t.onDeclined&&t.onDeclined(M),t.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+M.moduleId+" in "+M.parentId+P));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(M),t.ignoreUnaccepted||(k=new Error("Aborted because "+l+" is not accepted"+P));break;case"accepted":t.onAccepted&&t.onAccepted(M),N=!0;break;case"disposed":t.onDisposed&&t.onDisposed(M),I=!0;break;default:throw new Error("Unexception type "+M.type)}if(k)return p("abort"),Promise.reject(k);if(N)for(l in v[l]=h[l],d(y,M.outdatedModules),M.outdatedDependencies)Object.prototype.hasOwnProperty.call(M.outdatedDependencies,l)&&(m[l]||(m[l]=[]),d(m[l],M.outdatedDependencies[l]));I&&(d(y,[M.moduleId]),v[l]=g)}var D,A=[];for(o=0;o<y.length;o++)l=y[o],O[l]&&O[l].hot._selfAccepted&&v[l]!==g&&A.push({module:l,errorHandler:O[l].hot._selfAccepted});p("dispose"),Object.keys(S).forEach((function(e){!1===S[e]&&function(e){delete installedChunks[e]}(e)}));for(var E,q,F=y.slice();F.length>0;)if(l=F.pop(),c=O[l]){var B={},x=c.hot._disposeHandlers;for(r=0;r<x.length;r++)(n=x[r])(B);for(a[l]=B,c.hot.active=!1,delete O[l],delete m[l],r=0;r<c.children.length;r++){var _=O[c.children[r]];_&&((D=_.parents.indexOf(l))>=0&&_.parents.splice(D,1))}}for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(c=O[l]))for(q=m[l],r=0;r<q.length;r++)E=q[r],(D=c.children.indexOf(E))>=0&&c.children.splice(D,1);for(l in p("apply"),i=w,v)Object.prototype.hasOwnProperty.call(v,l)&&(e[l]=v[l]);var R=null;for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(c=O[l])){q=m[l];var T=[];for(o=0;o<q.length;o++)if(E=q[o],n=c.hot._acceptedDependencies[E]){if(-1!==T.indexOf(n))continue;T.push(n)}for(o=0;o<T.length;o++){n=T[o];try{n(q)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:q[o],error:e}),t.ignoreErrored||R||(R=e)}}}for(o=0;o<A.length;o++){var $=A[o];l=$.module,s=[l];try{C(l)}catch(e){if("function"==typeof $.errorHandler)try{$.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:e}),t.ignoreErrored||R||(R=n),R||(R=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||R||(R=e)}}return R?(p("fail"),Promise.reject(R)):(p("idle"),new Promise((function(e){e(y)})))}var O={};function C(t){if(O[t])return O[t].exports;var n=O[t]={i:t,l:!1,exports:{},hot:u(t),parents:(c=s,s=[],c),children:[]};return e[t].call(n.exports,n,n.exports,l(t)),n.l=!0,n.exports}C.m=e,C.c=O,C.d=function(e,t,n){C.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},C.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},C.t=function(e,t){if(1&t&&(e=C(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(C.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)C.d(n,o,function(t){return e[t]}.bind(null,o));return n},C.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return C.d(t,"a",t),t},C.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},C.p="dist/",C.h=function(){return i},l(8)(C.s=8)}([function(e,t){e.exports=React},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(6)},function(e,t){e.exports=ReactDOM},function(e,t,n){(function(e){!function(e){"use strict";function t(e,t,n,o){"function"==typeof t&&Object.setPrototypeOf(e,t),t===Error&&(n.stack={get:function(){return this.$__n4err.stack}},n.message={get:function(){return this.$__n4err.message}},n.name={get:function(){return e.n4type.name}}),Object.defineProperties(e,o);var i=Object.create(t.prototype,n);Object.defineProperty(i,"constructor",{value:e}),e.prototype=i}function n(e,t){Object.defineProperty(e,"n4type",{value:t,enumerable:!1}),t.ownedMembers.forEach((function(e){Object.defineProperty(e,"owner",{value:t,enumerable:!1})})),t.ownedMembers.forEach((function(e){e instanceof p&&(Object.defineProperty(e,"jsFunction",{value:e.constructor,enumerable:!1}),e.constructor.n4member=e)}))}function o(e){Object.defineProperty(e,"target",{value:this,enumerable:!1})}function i(e){e.annotations&&e.annotations.forEach(o,e)}var r=function(e){Object.prototype.constructor.call(this,e)},a=function(e){r.prototype.constructor.call(this,e),this.origin=e.origin,this.annotations=e.annotations||[],i(this)},s=function(e){a.prototype.constructor.call(this,e),this.name=e.name},c=function(e){s.prototype.constructor.call(this,e),this.fqn=e.fqn},l=function(e){c.prototype.constructor.call(this,e),this.n4superType=e.n4superType,this.allImplementedInterfaces=e.allImplementedInterfaces,this.annotations=e.annotations,this.ownedMembers=e.ownedMembers||[],this.consumedMembers=e.consumedMembers||[],this.ownedMembers.forEach((function(e){Object.defineProperty(e,"owner",{value:this,enumerable:!1}),i(e)}),this)},u=function(e){l.prototype.constructor.call(this,e)},d=function(e){l.prototype.constructor.call(this,e)},f=function(e){s.prototype.constructor.call(this,e),this.owner=e.owner,this.isStatic=e.isStatic||!1},p=function(e){f.prototype.constructor.call(this,e),this.jsFunction=e.jsFunction},m=function(e){f.prototype.constructor.call(this,e)},h=function(e){f.prototype.constructor.call(this,e),this.getter=e.getter},w=function(e){c.prototype.constructor.call(this,e)},y=function(e){Object.prototype.constructor.call(this,e)},v=function(e){c.prototype.constructor.call(this,e)},g=function(e){Object.prototype.constructor.call(this,e)},b=function(e){r.prototype.constructor.call(this,e),this.name=e.name,this.details=e.details,this.target=e.target},S=function(e){Object.prototype.constructor.call(this,e)},j=function(e){this.$__n4err=new Error(e)},M=function(e){Object.prototype.constructor.call(this,e)},k=function(e){Object.prototype.constructor.call(this,e)};t(r,Object,{},{}),t(a,r,{hasAnnotation:{value:function(e){return this.annotations.some((function(t){return t.name===e}))}},anyAnnotation:{value:function(e){for(var t=this.annotations.length-1;t>=0;t--){var n=this.annotations[t];if(n.name===e)return n}return null}},allAnnotations:{value:function(e){return this.annotations.filter((function(t){return t.name===e}))}}},{}),t(s,a,{},{}),t(c,s,{isClass:{get:function(){return!1}},isInterface:{get:function(){return!1}},isEnum:{get:function(){return!1}}},{of:{value:function(e){return e?e.n4type||e.constructor.n4type:void 0}}}),t(l,c,{members:{value:function(e,t,n){var o=this.ownedMembers.slice();if(e&&(o=o.concat(this.consumedMembers)),t&&this.n4superType instanceof l){var i=this.n4superType.members(e,t,n);o=o.concat(i)}return n||(o=o.filter((function(e){return!e.isStatic}))),o}},membersWithAnnotation:{value:function(e,t,n,o){return this.members(t,n,o).filter((function(t){return t.hasAnnotation(e)}))}},dataFields:{value:function(e,t,n){return this.members(e,t,n).filter((function(e){return e instanceof m}))}},dataFieldsWithAnnotation:{value:function(e,t,n,o){return this.membersWithAnnotation(e,t,n,o).filter((function(e){return e instanceof m}))}},methods:{value:function(e,t,n){return this.members(e,t,n).filter((function(e){return e instanceof p}))}},methodsWithAnnotation:{value:function(e,t,n,o){return this.membersWithAnnotation(e,t,n,o).filter((function(e){return e instanceof p}))}}},{}),t(u,l,{isClass:{get:function(){return!0}}},{}),t(d,l,{isInterface:{get:function(){return!0}}},{}),t(f,s,{},{}),t(p,f,{},{}),t(m,f,{},{}),t(h,f,{isGetter:{value:function(){return this.getter}},isSetter:{value:function(){return!this.getter}}},{}),t(w,c,{isEnum:{get:function(){return!0}}},{}),t(y,Object,{toString:{value:function(){return this.value}}},{findLiteralByName:{value:function(e){for(var t=this.literals.length-1;t>=0;t--)if(this.literals[t].name===e)return this.literals[t]}},findLiteralByValue:{value:function(e){for(var t=this.literals.length-1;t>=0;t--)if(this.literals[t].value===e)return this.literals[t]}}}),t(v,c,{isEnum:{get:function(){return!0}}},{}),t(g,Object,{toString:{value:function(){return this.value}}},{findLiteralByValue:{value:function(e){for(var t=this.literals.length-1;t>=0;t--)if(this.literals[t]===e)return this.literals[t]}}}),t(b,r,{},{}),t(j,Error,{},{}),n(r,new u({name:"N4Object",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Object",n4superType:r.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[],consumedMemebers:[]})),n(a,new u({name:"N4Element",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Element",n4superType:r.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"annotations",getter:!0}),new p({name:"hasAnnotation",jsFunction:a.hasAnnotation}),new p({name:"anyAnnotation",jsFunction:a.anyAnnotation}),new p({name:"allAnnotations",jsFunction:a.allAnnotations}),new h({name:"origin",getter:!0})],consumedMemebers:[]})),n(s,new u({name:"N4NamedElement",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4NamedElement",n4superType:a.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"name",getter:!0})],consumedMemebers:[]})),n(c,new u({name:"N4Type",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Type",n4superType:s.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"fqn",getter:!0}),new p({name:"of",jsFunction:c.of,isStatic:!0}),new h({name:"isClass",getter:!0}),new h({name:"isInterface",getter:!0}),new h({name:"isEnum",getter:!0})],consumedMemebers:[]})),n(l,new u({name:"N4Classifier",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Classifier",n4superType:c.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"n4superType",getter:!0}),new h({name:"allImplementedInterfaces",getter:!0}),new m({name:"ownedMembers"}),new m({name:"consumedMembers"}),new p({name:"constructor"}),new p({name:"members",jsFunction:l.members}),new p({name:"membersWithAnnotation",jsFunction:l.membersWithAnnotation}),new p({name:"dataFields",jsFunction:l.dataFields}),new p({name:"dataFieldsWithAnnotation",jsFunction:l.dataFieldsWithAnnotation}),new p({name:"methods",jsFunction:l.methods}),new p({name:"methodsWithAnnotation",jsFunction:l.methodsWithAnnotation})],consumedMemebers:[]})),n(u,new u({name:"N4Class",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Class",n4superType:l.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"isClass",getter:!0})],consumedMemebers:[]})),n(d,new u({name:"N4Interface",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Interface",n4superType:l.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"isInterface",getter:!0})],consumedMemebers:[]})),n(f,new u({name:"N4Member",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Member",n4superType:s.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"owner",getter:!0}),new h({name:"isStatic",getter:!0})],consumedMemebers:[]})),n(p,new u({name:"N4Method",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Method",n4superType:f.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"jsFunction",getter:!0})],consumedMemebers:[]})),n(m,new u({name:"N4DataField",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4DataField",n4superType:f.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[],consumedMemebers:[]})),n(h,new u({name:"N4Accessor",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Accessor",n4superType:f.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new m({name:"getter"}),new p({name:"isGetter",jsFunction:h.isGetter}),new p({name:"isSetter",jsFunction:h.isSetter})],consumedMemebers:[]})),n(w,new u({name:"N4EnumType",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4EnumType",n4superType:c.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"isEnum",getter:!0})],consumedMemebers:[]})),n(y,new u({name:"N4Enum",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Enum",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[new p({name:"toString",jsFunction:y.toString}),new p({name:"valueByName",jsFunction:y.valueByName,isStatic:!0}),new h({name:"name",getter:!0}),new h({name:"value",getter:!0}),new h({name:"values",getter:!0,isStatic:!0}),new h({name:"n4type",getter:!0})],consumedMemebers:[]})),n(v,new u({name:"N4StringBasedEnumType",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4StringBasedEnumType",n4superType:c.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"isEnum",getter:!0})],consumedMemebers:[]})),n(g,new u({name:"N4StringBasedEnum",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4StringBasedEnum",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[new p({name:"toString",jsFunction:g.toString}),new p({name:"valueByName",jsFunction:g.valueByName,isStatic:!0}),new h({name:"name",getter:!0}),new h({name:"value",getter:!0}),new h({name:"values",getter:!0,isStatic:!0}),new h({name:"n4type",getter:!0})],consumedMemebers:[]})),n(b,new u({name:"N4Annotation",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Annotation",n4superType:r.n4type,allImplementedInterfaces:[],annotations:[],ownedMembers:[new h({name:"name",getter:!0}),new h({name:"details",getter:!0}),new h({name:"target",getter:!0})],consumedMemebers:[]})),n(S,new d({name:"N4Provider",origin:"n4js-runtime",fqn:"N4BuiltInClasses/N4Provider",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[new p({name:"get",jsFunction:S.get,annotations:[]})],consumedMembers:[]})),n(j,new u({name:"N4ApiNotImplementedError",origin:"N4BuiltInClasses",fqn:"N4BuiltInClasses/N4ApiNotImplementedError",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[],consumedMemebers:[]})),n(M,new d({name:"MigrationController",origin:"n4js-runtime",fqn:"N4BuiltInClasses/MigrationController",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[new p({name:"migrate",isStatic:!1,annotations:[]}),new p({name:"migrateWith",isStatic:!1,annotations:[]}),new h({name:"context",getter:!0,isStatic:!1,annotations:[]})],consumedMembers:[]})),n(k,new d({name:"MigrationContext",origin:"n4js-runtime",fqn:"N4BuiltInClasses/MigrationContext",n4superType:void 0,allImplementedInterfaces:[],annotations:[],ownedMembers:[new p({name:"getTrace",isStatic:!1,annotations:[]}),new p({name:"isModified",isStatic:!1,annotations:[]}),new p({name:"setUserData",isStatic:!1,annotations:[]}),new p({name:"getUserData",isStatic:!1,annotations:[]})],consumedMembers:[]})),Object.freeze(r),Object.freeze(a),Object.freeze(s),Object.freeze(c),Object.freeze(l),Object.freeze(u),Object.freeze(d),Object.freeze(f),Object.freeze(p),Object.freeze(m),Object.freeze(h),Object.freeze(w),Object.freeze(y),Object.freeze(v),Object.freeze(g),Object.freeze(S),Object.freeze(j),Object.freeze(M),Object.freeze(k),e.N4Object=r,e.N4Element=a,e.N4NamedElement=s,e.N4Type=c,e.N4Classifier=l,e.N4Class=u,e.N4Interface=d,e.N4Member=f,e.N4Method=p,e.N4DataField=m,e.N4Accessor=h,e.N4EnumType=w,e.N4Enum=y,e.N4StringBasedEnumType=v,e.N4StringBasedEnum=g,e.N4Annotation=b,e.N4Provider=S,e.N4ApiNotImplementedError=j,e.MigrationController=M,e.MigrationContext=k}("object"==typeof e?e:self)}).call(this,n(1))},function(e,t,n){(function(e){!function(e){"use strict";var t=Symbol.hasInstance,n=Array.prototype.slice,o=function(){};function i(e,t){var n;Object.defineProperty(e,"n4type",{configurable:!0,get:function(){return n||(n=t())}})}function r(e){var t=e&&e.name;!t||t in this||e.isStatic||!e.jsFunction||(this[t]=e.jsFunction.value)}function a(e){var t=e&&e.n4type;t&&(t.ownedMembers.forEach(r,this),t.consumedMembers.forEach(r,this))}e.$makeClass=function(e,t,n,o,r,s){"function"==typeof t&&Object.setPrototypeOf(e,t),Object.defineProperties(e,r);var c=Object.create(t.prototype,o);n.forEach(a,c),Object.defineProperty(c,"constructor",{value:e}),s&&i(e,s.bind(null,c,e)),e.prototype=c},e.$makeInterface=function(e,n,o){e.$extends=n||(()=>[]),o&&i(e,o.bind(null,e.$methods,e)),Object.defineProperty(e,t,{value:function(t){if(!(t&&t.constructor&&t.constructor.n4type&&t.constructor.n4type.allImplementedInterfaces))return!1;const n=e.n4type.fqn;return-1!==t.constructor.n4type.allImplementedInterfaces.indexOf(n)}})},e.$initFieldsFromInterfaces=function e(t,n,o,i){for(const r of n){const n=r.$fieldDefaults||{};for(const e of Object.getOwnPropertyNames(n)){if(t.hasOwnProperty(e)||i.hasOwnProperty(e))continue;let r=void 0;o&&(r=o[e]),void 0===r&&(r=n[e],"function"==typeof r&&(r=r.call(t))),t[e]=r}e(t,r.$extends(),o,i)}},e.$makeEnum=function(t,n,r){var a,s,c,l,u;for(Object.setPrototypeOf(t,e.N4Enum),t.prototype=Object.create(e.N4Enum.prototype,{}),r&&i(t,r.bind(null,o)),Object.defineProperty(t.prototype,"constructor",{value:t}),a=n.length,l=new Array(a),s=0;s<a;++s)u=new t((c=n[s])[0],c[1]),Object.defineProperty(t,u.name,{enumerable:!0,value:u}),l[s]=u;Object.defineProperty(t,"literals",{value:l})},e.$sliceToArrayForDestruct=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e)){for(var n,o=[],i=e[Symbol.iterator]();!((n=i.next()).done||(o.push(n.value),o.length>=t)););return o}throw new TypeError("Invalid attempt to destructure non-iterable instance")},e.$spawn=function(e){function t(e,t){var i;try{i=this[e](t)}catch(e){return Promise.reject(e)}return i.done?Promise.resolve(i.value):Promise.resolve(i.value).then(n,o)}var n=t.bind(e,"next"),o=t.bind(e,"throw");return n()},e.$n4promisifyFunction=function(e,t,o,i){return new Promise((function(r,a){t.push((function(e,t){i?r(o?n.call(arguments,0):e):e?a(e):r(o?n.call(arguments,1):t)})),e.apply(null,t)}))},e.$n4promisifyMethod=function(e,t,o,i,r){return new Promise((function(a,s){o.push((function(e,t){r?a(i?n.call(arguments,0):e):e?s(e):a(i?n.call(arguments,1):t)})),e[t].apply(e,o)}))}}("object"==typeof e?e:self)}).call(this,n(1))},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=n(7),i="function"==typeof Symbol&&Symbol.for,r=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,s=i?Symbol.for("react.fragment"):60107,c=i?Symbol.for("react.strict_mode"):60108,l=i?Symbol.for("react.profiler"):60114,u=i?Symbol.for("react.provider"):60109,d=i?Symbol.for("react.context"):60110,f=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113;i&&Symbol.for("react.suspense_list");var m=i?Symbol.for("react.memo"):60115,h=i?Symbol.for("react.lazy"):60116;i&&Symbol.for("react.fundamental"),i&&Symbol.for("react.responder"),i&&Symbol.for("react.scope");var w="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||v}function S(){}function j(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||v}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},S.prototype=b.prototype;var M=j.prototype=new S;M.constructor=j,o(M,b.prototype),M.isPureReactComponent=!0;var k={current:null},N={current:null},I=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var o,i={},a=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)I.call(t,o)&&!O.hasOwnProperty(o)&&(i[o]=t[o]);var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){for(var l=Array(c),u=0;u<c;u++)l[u]=arguments[u+2];i.children=l}if(e&&e.defaultProps)for(o in c=e.defaultProps)void 0===i[o]&&(i[o]=c[o]);return{$$typeof:r,type:e,key:a,ref:s,props:i,_owner:N.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var D=/\/+/g,A=[];function E(e,t,n,o){if(A.length){var i=A.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=o,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:o,count:0}}function q(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function F(e,t,n){return null==e?0:function e(t,n,o,i){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var c=!1;if(null===t)c=!0;else switch(s){case"string":case"number":c=!0;break;case"object":switch(t.$$typeof){case r:case a:c=!0}}if(c)return o(i,t,""===n?"."+B(t,0):n),1;if(c=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var u=n+B(s=t[l],l);c+=e(s,u,o,i)}else if(null===t||"object"!=typeof t?u=null:u="function"==typeof(u=w&&t[w]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),l=0;!(s=t.next()).done;)c+=e(s=s.value,u=n+B(s,l++),o,i);else if("object"===s)throw o=""+t,Error(y(31,"[object Object]"===o?"object with keys {"+Object.keys(t).join(", ")+"}":o,""));return c}(e,"",t,n)}function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function x(e,t){e.func.call(e.context,t,e.count++)}function _(e,t,n){var o=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?R(e,o,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(D,"$&/")+"/")+n)),o.push(e))}function R(e,t,n,o,i){var r="";null!=n&&(r=(""+n).replace(D,"$&/")+"/"),F(e,_,t=E(t,r,o,i)),q(t)}function T(){var e=k.current;if(null===e)throw Error(y(321));return e}var $={Children:{map:function(e,t,n){if(null==e)return e;var o=[];return R(e,o,null,t,n),o},forEach:function(e,t,n){if(null==e)return e;F(e,x,t=E(null,null,t,n)),q(t)},count:function(e){return F(e,(function(){return null}),null)},toArray:function(e){var t=[];return R(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(y(143));return e}},createRef:function(){return{current:null}},Component:b,PureComponent:j,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:f,render:e}},lazy:function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return T().useCallback(e,t)},useContext:function(e,t){return T().useContext(e,t)},useEffect:function(e,t){return T().useEffect(e,t)},useImperativeHandle:function(e,t,n){return T().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return T().useLayoutEffect(e,t)},useMemo:function(e,t){return T().useMemo(e,t)},useReducer:function(e,t,n){return T().useReducer(e,t,n)},useRef:function(e){return T().useRef(e)},useState:function(e){return T().useState(e)},Fragment:s,Profiler:l,StrictMode:c,Suspense:p,createElement:C,cloneElement:function(e,t,n){if(null==e)throw Error(y(267,e));var i=o({},e.props),a=e.key,s=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,c=N.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)I.call(t,u)&&!O.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){l=Array(u);for(var d=0;d<u;d++)l[d]=arguments[d+2];i.children=l}return{$$typeof:r,type:e.type,key:a,ref:s,props:i,_owner:c}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:k,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:N,IsSomeRendererActing:{current:!1},assign:o}},W={default:$},K=W&&$||W;e.exports=K.default||K},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach((function(e){o[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,c=a(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))i.call(n,u)&&(c[u]=n[u]);if(o){s=o(n);for(var d=0;d<s.length;d++)r.call(n,s[d])&&(c[s[d]]=n[s[d]])}}return c}},function(e,t,n){"use strict";n.r(t);n(4),n(5);var o=n(2);function i(e){const t=e||{};({row:this.row,col:this.col}=t)}function r(e){const t=e||{};({piece:this.piece,fromPos:this.fromPos,toPos:this.toPos}=t)}$makeClass(i,N4Object,[],{equals:{value:function(e){return this.row==e.row&&this.col==e.col}},getBoardCoordinateRepresentation:{value:function(){return`(${8-this.row+","+String.fromCharCode("a".charCodeAt(0)+this.col)})`}},toString:{value:function(){return`(${this.row},${this.col})`}},row:{value:void 0,writable:!0},col:{value:void 0,writable:!0}},{},(function(e,t){return new N4Class({name:"Coordinate",origin:"chess-react",fqn:"Coordinate/Coordinate",n4superType:N4Object.n4type,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"row",isStatic:!1,annotations:[]}),new N4DataField({name:"col",isStatic:!1,annotations:[]}),new N4Method({name:"constructor",isStatic:!1,jsFunction:e.constructor,annotations:[]}),new N4Method({name:"equals",isStatic:!1,jsFunction:e.equals,annotations:[]}),new N4Method({name:"getBoardCoordinateRepresentation",isStatic:!1,jsFunction:e.getBoardCoordinateRepresentation,annotations:[]}),new N4Method({name:"toString",isStatic:!1,jsFunction:e.toString,annotations:[]})],consumedMembers:[],annotations:[]})})),$makeClass(r,N4Object,[],{toString:{value:function(){return this.piece+" "+this.fromPos.getBoardCoordinateRepresentation()+"→"+this.toPos.getBoardCoordinateRepresentation()}},piece:{value:void 0,writable:!0},fromPos:{value:void 0,writable:!0},toPos:{value:void 0,writable:!0}},{},(function(e,t){return new N4Class({name:"Move",origin:"chess-react",fqn:"Move/Move",n4superType:N4Object.n4type,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"piece",isStatic:!1,annotations:[]}),new N4DataField({name:"fromPos",isStatic:!1,annotations:[]}),new N4DataField({name:"toPos",isStatic:!1,annotations:[]}),new N4Method({name:"constructor",isStatic:!1,jsFunction:e.constructor,annotations:[]}),new N4Method({name:"toString",isStatic:!1,jsFunction:e.toString,annotations:[]})],consumedMembers:[],annotations:[]})}));var a=n(0),s={$fieldDefaults:{label:void 0},$methods:{}};$makeInterface(s,void 0,(function(e,t){return new N4Interface({name:"CoordinateSquareProps",origin:"chess-react",fqn:"components/CoordinateSquare/CoordinateSquareProps",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"label",isStatic:!1,annotations:[]})],consumedMembers:[],annotations:[]})}));const c={fontSize:"2vw",textAlign:"center",display:"flex",justifyContent:"center",alignItems:"center",width:"100%",height:"100%"};function l(e){a.Component.prototype.constructor.call(this,e)}$makeClass(l,a.Component,[],{render:{value:function(){return a.createElement("div",Object.assign({style:c}),this.props.label)}}},{},(function(e,t){return new N4Class({name:"LabelSquare",origin:"chess-react",fqn:"components/CoordinateSquare/LabelSquare",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4Method({name:"render",isStatic:!1,jsFunction:e.render,annotations:[]})],consumedMembers:[],annotations:[]})}));var u={$fieldDefaults:{isWhite:void 0,piece:void 0,onClick:void 0,isPicked:void 0,isValidDestination:void 0},$methods:{}};$makeInterface(u,void 0,(function(e,t){return new N4Interface({name:"SquareProps",origin:"chess-react",fqn:"components/Square/SquareProps",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"isWhite",isStatic:!1,annotations:[]}),new N4DataField({name:"piece",isStatic:!1,annotations:[]}),new N4DataField({name:"onClick",isStatic:!1,annotations:[]}),new N4DataField({name:"isPicked",isStatic:!1,annotations:[]}),new N4DataField({name:"isValidDestination",isStatic:!1,annotations:[]})],consumedMembers:[],annotations:[]})}));const d={display:"flex",justifyContent:"center",alignItems:"center",width:"100%",height:"100%",fontSize:"5vw"};function f(e){let t=e.isWhite?"#EADAB9":"#C2A482";return e.isPicked?t="lime":e.isValidDestination&&(t="yellow"),a.createElement("div",Object.assign({style:Object.assign({},d,{backgroundColor:t}),onClick:e.onClick}),e.piece)}var p={$fieldDefaults:{squares:void 0,pickedSquare:void 0,validDestinations:void 0,onClick:void 0},$methods:{}};$makeInterface(p,void 0,(function(e,t){return new N4Interface({name:"BoardProps",origin:"chess-react",fqn:"components/Board/BoardProps",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"squares",isStatic:!1,annotations:[]}),new N4DataField({name:"pickedSquare",isStatic:!1,annotations:[]}),new N4DataField({name:"validDestinations",isStatic:!1,annotations:[]}),new N4DataField({name:"onClick",isStatic:!1,annotations:[]})],consumedMembers:[],annotations:[]})}));const m={display:"flex",flexWrap:"wrap",width:"100%",height:"100%"},h={width:"10%",height:"10%"};function w(e){a.Component.prototype.constructor.call(this,e)}$makeClass(w,a.Component,[],{renderSquare:{value:function(e,t,n,o,i){return a.createElement("div",Object.assign({style:h}),a.createElement(f,Object.assign({isWhite:t,isPicked:n,isValidDestination:o,piece:i,onClick:()=>this.props.onClick(e)})))}},renderCoordinateSquare:{value:function(e){return a.createElement("div",Object.assign({style:h}),a.createElement(l,Object.assign({label:e})))}},renderSquares:{value:function(){const e=new Array;let t=!0;e.push(this.renderCoordinateSquare(""));for(let t=0;t<8;t++)e.push(this.renderCoordinateSquare(String.fromCharCode("a".charCodeAt(0)+t)));e.push(this.renderCoordinateSquare(""));for(let n=0;n<8;n++){e.push(this.renderCoordinateSquare((8-n).toString()));let o=t;for(let t=0;t<8;t++){const r=new i({row:n,col:t}),a=this.props.validDestinations.findIndex(e=>e.equals(r))>=0;e.push(this.renderSquare(r,o,!(!this.props.pickedSquare||!this.props.pickedSquare.equals(r)),a,this.props.squares[r.row][r.col])),o=!o}t=!t,e.push(this.renderCoordinateSquare((8-n).toString()))}e.push(this.renderCoordinateSquare(""));for(let t=0;t<8;t++)e.push(this.renderCoordinateSquare(String.fromCharCode("a".charCodeAt(0)+t)));return e.push(this.renderCoordinateSquare("")),e}},render:{value:function(){return a.createElement("div",Object.assign({style:m}),this.renderSquares())}}},{},(function(e,t){return new N4Class({name:"Board",origin:"chess-react",fqn:"components/Board/Board",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4Method({name:"renderSquare",isStatic:!1,jsFunction:e.renderSquare,annotations:[]}),new N4Method({name:"renderCoordinateSquare",isStatic:!1,jsFunction:e.renderCoordinateSquare,annotations:[]}),new N4Method({name:"renderSquares",isStatic:!1,jsFunction:e.renderSquares,annotations:[]}),new N4Method({name:"render",isStatic:!1,jsFunction:e.render,annotations:[]})],consumedMembers:[],annotations:[]})}));var y={$fieldDefaults:{squares:void 0,lastMoves:void 0,whiteKingMoved:void 0,leftWhiteRookMoved:void 0,rightWhiteRookMoved:void 0,blackKingMoved:void 0,leftBlackRookMoved:void 0,rightBlackRookMoved:void 0},$methods:{}};$makeInterface(y,void 0,(function(e,t){return new N4Interface({name:"Snapshot",origin:"chess-react",fqn:"components/Game/Snapshot",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"squares",isStatic:!1,annotations:[]}),new N4DataField({name:"lastMoves",isStatic:!1,annotations:[]}),new N4DataField({name:"whiteKingMoved",isStatic:!1,annotations:[]}),new N4DataField({name:"leftWhiteRookMoved",isStatic:!1,annotations:[]}),new N4DataField({name:"rightWhiteRookMoved",isStatic:!1,annotations:[]}),new N4DataField({name:"blackKingMoved",isStatic:!1,annotations:[]}),new N4DataField({name:"leftBlackRookMoved",isStatic:!1,annotations:[]}),new N4DataField({name:"rightBlackRookMoved",isStatic:!1,annotations:[]})],consumedMembers:[],annotations:[]})}));var v={};function g(e){a.Component.prototype.constructor.call(this,e);this.state={history:[{squares:[["♖","♘","♗","♕","♔","♗","♘","♖"],["♙","♙","♙","♙","♙","♙","♙","♙"],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],["♟","♟","♟","♟","♟","♟","♟","♟"],["♜","♞","♝","♛","♚","♝","♞","♜"]],lastMoves:new Array,whiteKingMoved:!1,leftWhiteRookMoved:!1,rightWhiteRookMoved:!1,blackKingMoved:!1,leftBlackRookMoved:!1,rightBlackRookMoved:!1}],stepNumber:0,whiteIsNext:!0,pickedSquare:null,validDestinations:new Array}}v.$fieldDefaults={history:void 0,stepNumber:void 0,whiteIsNext:void 0,pickedSquare:void 0,validDestinations:void 0},v.$methods={},$makeInterface(v,void 0,(function(e,t){return new N4Interface({name:"GameState",origin:"chess-react",fqn:"components/Game/GameState",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4DataField({name:"history",isStatic:!1,annotations:[]}),new N4DataField({name:"stepNumber",isStatic:!1,annotations:[]}),new N4DataField({name:"whiteIsNext",isStatic:!1,annotations:[]}),new N4DataField({name:"pickedSquare",isStatic:!1,annotations:[]}),new N4DataField({name:"validDestinations",isStatic:!1,annotations:[]})],consumedMembers:[],annotations:[]})})),$makeClass(g,a.Component,[],{handleClick:{value:function(e){const t=e.row,n=e.col,o=this.state.history.slice(0,this.state.stepNumber+1),i=o[o.length-1],a=this.state.pickedSquare;let s=i.squares;if(this.calculateWinner(s))return;const c=s[t][n];if(this.isWhitepiece(c)&&this.state.whiteIsNext||this.isBlackpiece(c)&&!this.state.whiteIsNext){const t=this.calculateValidDestinations(s,c,e);return void this.setState({pickedSquare:e,validDestinations:t})}if(!a)return;const l=new r({piece:s[a.row][a.col],fromPos:a,toPos:e});if(this.isValidMove(s,l)){const{squares:e,moves:t}=this.move(l);let n=i.whiteKingMoved,r=i.leftWhiteRookMoved,s=i.rightWhiteRookMoved,c=i.blackKingMoved,u=i.leftBlackRookMoved,d=i.rightBlackRookMoved;this.isWhitepiece(l.piece)?(n=n||"♔"==l.piece,r=r||"♖"==l.piece&&0==a.col,s=s||"♖"==l.piece&&7==a.col):(c=c||"♚"==l.piece,u=u||"♜"==l.piece&&0==a.col,d=d||"♜"==l.piece&&7==a.col),this.setState({history:o.concat([{squares:e,lastMoves:t,whiteKingMoved:n,leftWhiteRookMoved:r,rightWhiteRookMoved:s,blackKingMoved:c,leftBlackRookMoved:u,rightBlackRookMoved:d}]),stepNumber:o.length,whiteIsNext:!this.state.whiteIsNext,pickedSquare:null,validDestinations:new Array})}else this.setState({pickedSquare:null,validDestinations:new Array})}},goToStep:{value:function(e){this.setState({stepNumber:e,whiteIsNext:e%2==0,pickedSquare:null,validDestinations:new Array})}},getAllPiecesSameColor:{value:function(e,t){const n=new Array;for(let o=0;o<8;o++)for(let r=0;r<8;r++)(t&&this.isWhitepiece(e[o][r])||!t&&this.isBlackpiece(e[o][r]))&&n.push({piece:e[o][r],pos:new i({row:o,col:r})});return n}},forAll:{value:function(e,t){return e.reduce((e,n)=>e&&t(n),!0)}},calculateWinner:{value:function(e){const t=this.state.whiteIsNext,n=this.getAllPiecesSameColor(e,t);return this.forAll(n,t=>0==this.calculateValidDestinations(e,t.piece,t.pos).length)?t?"Black":"White":null}},calculateValidDestinations:{value:function(e,t,n){const o=this.calculateAttackedDestinations(e,t,n),a=this.isWhitepiece(t);if("♙"==t||"♟"==t)if(a&&n.row<7){const t=new i({row:n.row+1,col:n.col});if(e[t.row][t.col]||o.push(t),n.row<=1){const r=new i({row:n.row+2,col:n.col});e[t.row][t.col]||e[r.row][r.col]||o.push(r)}}else if(!a&&n.row>0){const t=new i({row:n.row-1,col:n.col});if(e[t.row][t.col]||o.push(t),n.row>=6){const r=new i({row:n.row-2,col:n.col});e[t.row][t.col]||e[r.row][r.col]||o.push(r)}}const s=this.state.history[this.state.stepNumber];return"♔"==t&&a&&!s.whiteKingMoved?(s.leftWhiteRookMoved||e[n.row][n.col-1]||e[n.row][n.col-2]||e[n.row][n.col-3]||o.push(new i({row:n.row,col:n.col-2})),s.rightWhiteRookMoved||e[n.row][n.col+1]||e[n.row][n.col+2]||o.push(new i({row:n.row,col:n.col+2}))):"♚"!=t||a||s.blackKingMoved||(s.leftBlackRookMoved||e[n.row][n.col-1]||e[n.row][n.col-2]||e[n.row][n.col-3]||o.push(new i({row:n.row,col:n.col-2})),s.rightBlackRookMoved||e[n.row][n.col+1]||e[n.row][n.col+2]||o.push(new i({row:n.row,col:n.col+2}))),o.filter(e=>!this.isKingInCheckIfMove(new r({piece:t,fromPos:n,toPos:e})))}},isValidMove:{value:function(e,t){return this.calculateValidDestinations(e,t.piece,t.fromPos).findIndex(e=>e.equals(t.toPos))>=0}},isInsideBoard:{value:function(e){return 0<=e.row&&e.row<8&&0<=e.col&&e.col<8}},calculateKnightAttackingDestinations:{value:function(e,t,n){return[[-1,-2],[-2,-1],[-2,1],[-1,2],[1,2],[2,1],[2,-1],[1,-2]].map(e=>new i({row:n.row+e[0],col:n.col+e[1]})).filter(n=>this.isInsideBoard(n)&&!this.isPositionOccupiedBypieceSameColor(e,t,n))}},calculateRookAttackingDestinations:{value:function(e,t,n){const o=n.row,r=n.col,a=new Array,s=[[-1,0],[1,0],[0,-1],[0,1]];for(let n of s){let s=new i({row:o+n[0],col:r+n[1]});for(;this.isInsideBoard(s);){if(e[s.row][s.col]){if(this.isPositionOccupiedBypieceSameColor(e,t,s))break;if(this.isPositionOccupiedBypieceOtherColor(e,t,s)){a.push(s);break}}else a.push(s);s=new i({row:s.row+n[0],col:s.col+n[1]})}}return a}},calculateBishopAttackingDestinations:{value:function(e,t,n){const o=n.row,r=n.col,a=new Array,s=[[-1,-1],[-1,1],[1,1],[1,-1]];for(let n of s){let s=new i({row:o+n[0],col:r+n[1]});for(;this.isInsideBoard(s);){if(e[s.row][s.col]){if(this.isPositionOccupiedBypieceSameColor(e,t,s))break;if(this.isPositionOccupiedBypieceOtherColor(e,t,s)){a.push(s);break}}else a.push(s);s=new i({row:s.row+n[0],col:s.col+n[1]})}}return a}},calculateQueenAttackingDestinations:{value:function(e,t,n){return this.isWhitepiece(t)?this.calculateRookAttackingDestinations(e,"♖",n).concat(this.calculateBishopAttackingDestinations(e,"♗",n)):this.calculateRookAttackingDestinations(e,"♜",n).concat(this.calculateBishopAttackingDestinations(e,"♝",n))}},calculateKingAttackingDestinations:{value:function(e,t,n){return[[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1]].map(e=>new i({row:n.row+e[0],col:n.col+e[1]})).filter(n=>this.isInsideBoard(n)&&!this.isPositionOccupiedBypieceSameColor(e,t,n))}},calculatePawnAttackingDestinations:{value:function(e,t,n){const o=new Array,r=this.isWhitepiece(t);if(r&&n.row<7)for(let r of[1,-1]){const a=new i({row:n.row+1,col:n.col+r});this.isInsideBoard(a)&&this.isPositionOccupiedBypieceOtherColor(e,t,a)&&o.push(a)}else if(!r&&n.row>0)for(let r of[1,-1]){const a=new i({row:n.row-1,col:n.col+r});this.isInsideBoard(a)&&this.isPositionOccupiedBypieceOtherColor(e,t,a)&&o.push(a)}return o}},calculateAttackedDestinations:{value:function(e,t,n){let o=new Array;switch(t){case"♘":case"♞":o=this.calculateKnightAttackingDestinations(e,t,n);break;case"♖":case"♜":o=this.calculateRookAttackingDestinations(e,t,n);break;case"♗":case"♝":o=this.calculateBishopAttackingDestinations(e,t,n);break;case"♕":case"♛":o=this.calculateQueenAttackingDestinations(e,t,n);break;case"♔":case"♚":o=this.calculateKingAttackingDestinations(e,t,n);break;case"♔":case"♚":o=this.calculateKingAttackingDestinations(e,t,n);break;case"♙":case"♟":o=this.calculatePawnAttackingDestinations(e,t,n)}return o}},isKingInCheckIfMove:{value:function(e){const{squares:t}=this.move(e),n=this.isWhitepiece(e.piece),o=this.getKingPosition(t,n);return!!o&&this.isKingInCheck(t,n?"♔":"♚",o)}},isKingInCheck:{value:function(e,t,n){if("♔"!=t&&"♚"!=t)throw"The input piece is not a king";const o="♔"==t?this.getPiecesOfSameColor(e,!1):this.getPiecesOfSameColor(e,!0);let i=new Array;for(let t of o){const n=this.calculateAttackedDestinations(e,t.piece,t.pos);i=i.concat(n)}return!!i.find(e=>e.equals(n))}},getPiecesOfSameColor:{value:function(e,t){const n=new Array;for(let o=0;o<e.length;o++)for(let r=0;r<e[o].length;r++)(t?this.isWhitepiece(e[o][r]):this.isBlackpiece(e[o][r]))&&n.push({piece:e[o][r],pos:new i({row:o,col:r})});return n}},getKingPosition:{value:function(e,t){for(let n=0;n<e.length;n++)for(let o=0;o<e[n].length;o++)if(t?"♔"==e[n][o]:"♚"==e[n][o])return new i({row:n,col:o});return null}},isPositionOccupiedBypieceSameColor:{value:function(e,t,n){const o=this.isWhitepiece(t);return!(!o||!this.isWhitepiece(e[n.row][n.col]))||!(o||!this.isBlackpiece(e[n.row][n.col]))}},isPositionOccupiedBypieceOtherColor:{value:function(e,t,n){const o=this.isWhitepiece(t);return!(!o||!this.isBlackpiece(e[n.row][n.col]))||!(o||!this.isWhitepiece(e[n.row][n.col]))}},getCurrentSnapshot:{value:function(){return this.state.history[this.state.stepNumber]}},move:{value:function(e){const t=e.piece,n=e.fromPos,o=e.toPos,a=this.getCurrentSnapshot().squares,s=a.map(e=>e.slice()),c=new Array;if(this.isCastlingMove(t,n,o)){let e,l;c.push(new r({piece:t,fromPos:new i({row:n.row,col:n.col}),toPos:new i({row:o.row,col:o.col})})),s[o.row][o.col]=t,s[n.row][n.col]=null,"♔"==t?o.col<n.col?(e=new i({row:0,col:0}),l=new i({row:0,col:3})):(e=new i({row:0,col:7}),l=new i({row:0,col:5})):o.col<n.col?(e=new i({row:7,col:0}),l=new i({row:7,col:3})):(e=new i({row:7,col:7}),l=new i({row:7,col:5})),c.push(new r({piece:a[e.row][e.col],fromPos:e,toPos:l})),s[l.row][l.col]=a[e.row][e.col],s[e.row][e.col]=null}else{const t=a[n.row][n.col];s[o.row][o.col]=t,s[n.row][n.col]=null,c.push(e)}return{squares:s,moves:c}}},isCastlingMove:{value:function(e,t,n){const o=this.getCurrentSnapshot();return"♔"==e&&!o.whiteKingMoved&&2==Math.abs(n.col-t.col)||"♚"==e&&!o.blackKingMoved&&2==Math.abs(n.col-t.col)}},isLeftWhiteRook:{value:function(e,t){return"♖"==e&&0==t.row&&0==t.col}},isWhitepiece:{value:function(e){switch(e){case"♙":case"♖":case"♘":case"♗":case"♕":case"♔":return!0;default:return!1}}},isBlackpiece:{value:function(e){switch(e){case"♟":case"♜":case"♞":case"♝":case"♛":case"♚":return!0;default:return!1}}},render:{value:function(){const e=this.state.history,t=e[this.state.stepNumber],n=this.calculateWinner(t.squares),o=e.map((e,t)=>{const n=t?"Go to move #"+t:"Go to game start",o={textAlign:"center",verticalAlign:"middle",padding:"5px",position:"relative"};return a.createElement(a.Fragment,null,a.createElement("tr",null,a.createElement("td",Object.assign({style:o}),t),a.createElement("td",Object.assign({style:o}),e.lastMoves.join(",")),a.createElement("td",Object.assign({style:o}),a.createElement("button",Object.assign({style:{backgroundColor:"green",border:"none",color:"white",padding:"4px",textAlign:"center",textDecoration:"none",display:"inline-block"},onClick:()=>this.goToStep(t)}),n))))});let i;i=n?"Winner: "+n:"Next player: "+(this.state.whiteIsNext?"White":"Black");return a.createElement("div",Object.assign({style:{display:"flex",flexDirection:"row"}}),a.createElement("div",Object.assign({style:{width:"60vw",height:"60vw"}}),a.createElement(w,Object.assign({squares:t.squares,pickedSquare:this.state.pickedSquare,validDestinations:this.state.validDestinations,onClick:e=>this.handleClick(e)}))),a.createElement("div",Object.assign({style:{marginTop:"20px",marginLeft:"20px",width:"40vw",fontSize:"1.5vw"}}),a.createElement("div",null,i),a.createElement("p",null),a.createElement("table",Object.assign({style:{width:"100%"}}),a.createElement("tr",null,a.createElement("th",Object.assign({style:{width:"10%"}}),"Step"),a.createElement("th",Object.assign({style:{width:"45%"}}),"Move"),a.createElement("th",Object.assign({style:{width:"45%"}}),"Action")),o)))}}},{},(function(e,t){return new N4Class({name:"Game",origin:"chess-react",fqn:"components/Game/Game",n4superType:void 0,allImplementedInterfaces:[],ownedMembers:[new N4Method({name:"constructor",isStatic:!1,jsFunction:e.constructor,annotations:[]}),new N4Method({name:"handleClick",isStatic:!1,jsFunction:e.handleClick,annotations:[]}),new N4Method({name:"goToStep",isStatic:!1,jsFunction:e.goToStep,annotations:[]}),new N4Method({name:"getAllPiecesSameColor",isStatic:!1,jsFunction:e.getAllPiecesSameColor,annotations:[]}),new N4Method({name:"forAll",isStatic:!1,jsFunction:e.forAll,annotations:[]}),new N4Method({name:"calculateWinner",isStatic:!1,jsFunction:e.calculateWinner,annotations:[]}),new N4Method({name:"calculateValidDestinations",isStatic:!1,jsFunction:e.calculateValidDestinations,annotations:[]}),new N4Method({name:"isValidMove",isStatic:!1,jsFunction:e.isValidMove,annotations:[]}),new N4Method({name:"isInsideBoard",isStatic:!1,jsFunction:e.isInsideBoard,annotations:[]}),new N4Method({name:"calculateKnightAttackingDestinations",isStatic:!1,jsFunction:e.calculateKnightAttackingDestinations,annotations:[]}),new N4Method({name:"calculateRookAttackingDestinations",isStatic:!1,jsFunction:e.calculateRookAttackingDestinations,annotations:[]}),new N4Method({name:"calculateBishopAttackingDestinations",isStatic:!1,jsFunction:e.calculateBishopAttackingDestinations,annotations:[]}),new N4Method({name:"calculateQueenAttackingDestinations",isStatic:!1,jsFunction:e.calculateQueenAttackingDestinations,annotations:[]}),new N4Method({name:"calculateKingAttackingDestinations",isStatic:!1,jsFunction:e.calculateKingAttackingDestinations,annotations:[]}),new N4Method({name:"calculatePawnAttackingDestinations",isStatic:!1,jsFunction:e.calculatePawnAttackingDestinations,annotations:[]}),new N4Method({name:"calculateAttackedDestinations",isStatic:!1,jsFunction:e.calculateAttackedDestinations,annotations:[]}),new N4Method({name:"isKingInCheckIfMove",isStatic:!1,jsFunction:e.isKingInCheckIfMove,annotations:[]}),new N4Method({name:"isKingInCheck",isStatic:!1,jsFunction:e.isKingInCheck,annotations:[]}),new N4Method({name:"getPiecesOfSameColor",isStatic:!1,jsFunction:e.getPiecesOfSameColor,annotations:[]}),new N4Method({name:"getKingPosition",isStatic:!1,jsFunction:e.getKingPosition,annotations:[]}),new N4Method({name:"isPositionOccupiedBypieceSameColor",isStatic:!1,jsFunction:e.isPositionOccupiedBypieceSameColor,annotations:[]}),new N4Method({name:"isPositionOccupiedBypieceOtherColor",isStatic:!1,jsFunction:e.isPositionOccupiedBypieceOtherColor,annotations:[]}),new N4Method({name:"getCurrentSnapshot",isStatic:!1,jsFunction:e.getCurrentSnapshot,annotations:[]}),new N4Method({name:"move",isStatic:!1,jsFunction:e.move,annotations:[]}),new N4Method({name:"isCastlingMove",isStatic:!1,jsFunction:e.isCastlingMove,annotations:[]}),new N4Method({name:"isLeftWhiteRook",isStatic:!1,jsFunction:e.isLeftWhiteRook,annotations:[]}),new N4Method({name:"isWhitepiece",isStatic:!1,jsFunction:e.isWhitepiece,annotations:[]}),new N4Method({name:"isBlackpiece",isStatic:!1,jsFunction:e.isBlackpiece,annotations:[]}),new N4Method({name:"render",isStatic:!1,jsFunction:e.render,annotations:[]})],consumedMembers:[],annotations:[]})})),n(3).render(o.createElement(g,null),document.getElementById("chessAppMountPoint"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,